"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[5716],{4696:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"back-end/drupal/drupal-simplesamlphp-password-protection","title":"Simplesamlphp (per page) password protection in drupal","description":"Requires saml auth in order to view a page. This assumes you are already using simplesamlphp for authentication, via the drupal module. Similar approaches could be used for different SSO solutions. The main idea is to add a boolean field to a single content type, to require login in order to view the content or not.","source":"@site/docs/back-end/drupal/drupal-simplesamlphp-password-protection.md","sourceDirName":"back-end/drupal","slug":"/back-end/drupal/drupal-simplesamlphp-password-protection","permalink":"/docs/back-end/drupal/drupal-simplesamlphp-password-protection","draft":false,"unlisted":false,"editUrl":"https://github.com/idfive/Developer-Documentation/tree/main/docs/back-end/drupal/drupal-simplesamlphp-password-protection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Simple (per page) password protection in drupal","permalink":"/docs/back-end/drupal/drupal-simple-password-protection"},"next":{"title":"Drupal Site Building","permalink":"/docs/back-end/drupal/drupal-sitebuilding"}}');var t=r(4848),i=r(8453);const a={},c="Simplesamlphp (per page) password protection in drupal",l={},o=[{value:"To enact",id:"to-enact",level:2},{value:"Create the service",id:"create-the-service",level:3},{value:"MY_MODULE.services.yml",id:"my_moduleservicesyml",level:4},{value:"src/Services/MyService.php",id:"srcservicesmyservicephp",level:4},{value:"Create the event subscriber",id:"create-the-event-subscriber",level:3},{value:"src/EventSubscriber/MyServiceSubscriber.php",id:"srceventsubscribermyservicesubscriberphp",level:4}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"simplesamlphp-per-page-password-protection-in-drupal",children:"Simplesamlphp (per page) password protection in drupal"})}),"\n",(0,t.jsx)(n.p,{children:"Requires saml auth in order to view a page. This assumes you are already using simplesamlphp for authentication, via the drupal module. Similar approaches could be used for different SSO solutions. The main idea is to add a boolean field to a single content type, to require login in order to view the content or not."}),"\n",(0,t.jsx)(n.h2,{id:"to-enact",children:"To enact"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create the boolean field on bundle of choice."}),"\n",(0,t.jsx)(n.li,{children:"Create the service, which will run the authentication."}),"\n",(0,t.jsx)(n.li,{children:"Create the event subscriber, which will decide if a page should be authenticated."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"create-the-service",children:"Create the service"}),"\n",(0,t.jsx)(n.h4,{id:"my_moduleservicesyml",children:"MY_MODULE.services.yml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"services:\n  MY_SERVICE.auth:\n    class: Drupal\\MY_MODULE\\Services\\MyService\n  MY_SERVICE.auth_event_subscriber:\n    class: Drupal\\howard_content_types\\EventSubscriber\\HowardAuthSubscriber\n    tags:\n      - {name: event_subscriber}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"srcservicesmyservicephp",children:"src/Services/MyService.php"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace Drupal\\MY_MODULE\\Services;\n\n// May or may not need this, depending on setup.\nrequire_once('../simplesamlphp/lib/_autoload.php');\n\nuse SimpleSAML\\Auth\\Simple;\n\n/**\n * Class MyService.\n */\nclass MyService {\n\n\n  /**\n   * Constructs a new MyService object.\n   */\n  public function __construct() {\n\n  }\n\n  /**\n   * Public method to test if users are authenticated via SAML, and return username.\n   */\n  public function limitToSamlUsers() {\n      $as = new Simple('default-sp');\n      $as->requireAuth();\n      $attributes = $as->getAttributes();\n  }\n\n}\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-the-event-subscriber",children:"Create the event subscriber"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This creates an event subscriber that runs when the symphony kernel is requested."}),"\n",(0,t.jsx)(n.li,{children:'Conceivably, this should effectively "preprocess" the page, and be able to check for our fields/etc before the cache is hit.'}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"srceventsubscribermyservicesubscriberphp",children:"src/EventSubscriber/MyServiceSubscriber.php"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace Drupal\\MY_MODULE\\EventSubscriber;\n\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Drupal\\node\\NodeInterface;\n\n/**\n * Class MyServiceSubscriber.\n *\n * @package Drupal\\MY_MODULE.\n */\nclass MyServiceSubscriber implements EventSubscriberInterface {\n\n  /**\n   * {@inheritdoc}\n   */\n  public static function getSubscribedEvents() {\n    $events[KernelEvents::REQUEST][] = ['disableCacheForProtectedPage'];\n    return $events;\n  }\n\n  /**\n   * Subscriber Callback for the event.\n   */\n  public function disableCacheForProtectedPage() {\n\n    // Check if current node type is one we want to exclude from the cache.\n    $node = \\Drupal::routeMatch()->getParameter('node');\n    if ($node instanceof NodeInterface) {\n      $node_type = $node->getType();\n    }\n\n    if (isset($node_type) && $node_type == 'MY_BUNDLE') {\n      if ($node->hasField('MY_BOOLEAN_FIELD')) {\n        $value = $node->get('MY_BOOLEAN_FIELD')->getValue();\n        if (isset($value[0]) && $value[0]['value'] == '1') {\n          // Flip the cache kill switch.\n          \\Drupal::service('page_cache_kill_switch')->trigger();\n          if (\\Drupal::currentUser()->isAnonymous()) {\n            // Ignore auth requirement if you are a logged in drupal user.\n            \\Drupal::service('MY_SERVICE.auth')->limitToHowardUsers();\n          }\n        }\n      }\n    }\n  }\n\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
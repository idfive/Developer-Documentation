"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[9976],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const s={},o="Custom REST endpoints",i={unversionedId:"back-end/drupal/drupal-rest-custom",id:"back-end/drupal/drupal-rest-custom",title:"Custom REST endpoints",description:"While stock REST endpoints in drupal can (and should) be used in most scenarios, sometimes we need to get tricky.",source:"@site/docs/back-end/drupal/drupal-rest-custom.md",sourceDirName:"back-end/drupal",slug:"/back-end/drupal/drupal-rest-custom",permalink:"/docs/back-end/drupal/drupal-rest-custom",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/back-end/drupal/drupal-rest-custom.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Drupal Performance",permalink:"/docs/back-end/drupal/drupal-performance"},next:{title:"Drupal 8 Services",permalink:"/docs/back-end/drupal/drupal-services"}},l={},u=[{value:"Basic Overview",id:"basic-overview",level:2},{value:"Create custom Plugin",id:"create-custom-plugin",level:2},{value:"Simple example",id:"simple-example",level:3},{value:"Complex example",id:"complex-example",level:3},{value:"Enable endpoint and add permissions to access",id:"enable-endpoint-and-add-permissions-to-access",level:2},{value:"Adjust CORS",id:"adjust-cors",level:2},{value:"Caching Notes",id:"caching-notes",level:2},{value:"WYSIWYG Notes",id:"wysiwyg-notes",level:2}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-rest-endpoints"},"Custom REST endpoints"),(0,a.kt)("p",null,"While stock REST endpoints in drupal can (and should) be used in most scenarios, sometimes we need to get tricky."),(0,a.kt)("p",null,"Some common scenarios that may warrant a custom endpoint:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The need to match existing JSON, or for a custom json structure."),(0,a.kt)("li",{parentName:"ul"},"The need for complex logic in the query."),(0,a.kt)("li",{parentName:"ul"},"The need for a simplified return."),(0,a.kt)("li",{parentName:"ul"},"The need to combine queries into a single return.")),(0,a.kt)("h2",{id:"basic-overview"},"Basic Overview"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create custom Plugin."),(0,a.kt)("li",{parentName:"ul"},"Enable endpoint and add permissions to access."),(0,a.kt)("li",{parentName:"ul"},"Adjust CORS, if needed.")),(0,a.kt)("h2",{id:"create-custom-plugin"},"Create custom Plugin"),(0,a.kt)("p",null,"A simple endpoint that returns static content. Can be modified with queries/etc as needed."),(0,a.kt)("h3",{id:"simple-example"},"Simple example"),(0,a.kt)("p",null,"MY_MODULE/src/Plugin/rest/resource/MyCustomEndpoint.php"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nnamespace Drupal\\MY_MODULE\\Plugin\\rest\\resource;\n\nuse Drupal\\rest\\Plugin\\ResourceBase;\nuse Drupal\\rest\\ResourceResponse;\n\n/**\n * Provides a resource to get view modes by entity and bundle.\n *\n * @RestResource(\n *   id = "my_custom_endpoint",\n *   label = @Translation("My Custom REST Endpoint"),\n *   uri_paths = {\n *     "canonical" = "/api/my_module/my_custom_endpoint"\n *   }\n * )\n */\nclass MyCustomEndpoint extends ResourceBase {\n\n  /**\n   * Responds to GET requests.\n   *\n   * @return \\Drupal\\rest\\ResourceResponse\n   *   The HTTP response object.\n   *\n   * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n   *   Throws exception expected.\n   */\n  public function get() {\n    // Logic here to do whatever you wish, usually an entity query/etc.\n    $static = \'Congrats on your new REST endpoint!\';\n    return new ResourceResponse($static);\n  }\n\n}\n')),(0,a.kt)("h3",{id:"complex-example"},"Complex example"),(0,a.kt)("p",null,"A more complex example that shows arguments, and returns a combined list of two separate queries."),(0,a.kt)("p",null,"In this example we will:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use a custom Service for the logic of getting content, as is a better practice."),(0,a.kt)("li",{parentName:"ul"},"Pass an argument to the REST endpoint, in this case a TID."),(0,a.kt)("li",{parentName:"ul"},"Construct a global variable."),(0,a.kt)("li",{parentName:"ul"},"Get a list of content of type CONTENT_TYPE_ONE tagged with that TID."),(0,a.kt)("li",{parentName:"ul"},"Get a list of content of type CONTENT_TYPE_TWO tagged with that TID."),(0,a.kt)("li",{parentName:"ul"},"Format the response to a few simple fields."),(0,a.kt)("li",{parentName:"ul"},"Return a single response with both lists.")),(0,a.kt)("p",null,"MY_MODULE/src/Plugin/rest/resource/MyCustomEndpoint.php"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Drupal\\MY_MODULE\\Plugin\\rest\\resource;\n\nuse Drupal\\rest\\Plugin\\ResourceBase;\nuse Drupal\\rest\\ResourceResponse;\nuse Psr\\Log\\LoggerInterface;\nuse Drupal\\MY_MODULE\\Services\\MyGeneralService;\n\n/**\n * Provides a resource to get view modes by entity and bundle.\n *\n * @RestResource(\n *   id = \"my_custom_endpoint\",\n *   label = @Translation(\"My Custom REST Endpoint\"),\n *   uri_paths = {\n *     \"canonical\" = \"/api/my_module/my_custom_endpoint/{custom_arg}\"\n *   }\n * )\n */\nclass MyCustomEndpoint extends ResourceBase {\n\n  public $content_types;\n\n  /**\n   * Constructs a new content types object.\n   */\n  public function __construct(array $configuration, $plugin_id, $plugin_definition, array $serializer_formats, LoggerInterface $logger) {\n    parent::__construct($configuration, $plugin_id, $plugin_definition, $serializer_formats, $logger);\n    $this->content_types = [\n     [\n       'machine_name' => 'CONTENT_TYPE_ONE',\n     ],\n     [\n       'machine_name' => 'CONTENT_TYPE_TWO',\n     ],\n    ];\n  }\n\n  /**\n   * Responds to GET requests.\n   *\n   * @return \\Drupal\\rest\\ResourceResponse\n   *   The HTTP response object.\n   *\n   * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n   *   Throws exception expected.\n   */\n  public function get($custom_arg = NULL) {\n    if ($custom_arg) {\n      $response = [];\n      foreach ($this->content_types as $key => $content_type) {\n        $response[$content_type['machine_name']] = MyGeneralService::getStuff($custom_arg, $content_type['machine_name']);\n      }\n      return new ResourceResponse($response);\n    }\n  }\n\n}\n")),(0,a.kt)("p",null,"MY_MODULE/src/Services/MyGeneralService.php"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Drupal\\MY_MODULE\\Services;\n\nuse Drupal\\node\\Entity\\Node;\nuse Drupal\\Component\\Utility\\Unicode;\n\n/**\n * Class MyGeneralService.\n */\nclass MyGeneralService {\n\n  /**\n   * Public method to get stuff.\n   */\n  public function getStuff($tid = NULL, $type = NULL) {\n    if ($tid) {\n      $nids = \\Drupal::entityQuery('node')->condition('type', $type)\n        ->condition('status', 1)\n        ->condition('FIELD_MY_COMMON_TAXONOMY_FIELD', $tid)\n        ->range(0, 6)\n        ->accessCheck(FALSE)\n        ->execute();\n      if ($nids) {\n        $nodes = Node::loadMultiple($nids);\n        $articles = self::formatStuffForRest($nodes);\n      }\n    }\n    return $articles;\n  }\n\n  /**\n   * Format nodes for rest return.\n   * @return Array articles\n   */\n  public static function formatStuffForRest($results) {\n    $articles = [];\n    foreach ($results as $result) {\n      $article = [];\n      $nid = $result->id();\n      $article['title'] = $result->getTitle();\n      $description = $result->field_summary->value;\n      $article['description'] = Unicode::truncate($description, 200, TRUE, TRUE, 5);\n      $article['url'] = \\Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);\n      $articles[] = $article;\n    }\n    return $articles;\n  }\n\n}\n")),(0,a.kt)("h2",{id:"enable-endpoint-and-add-permissions-to-access"},"Enable endpoint and add permissions to access"),(0,a.kt)("p",null,"While this can also be done manually by writing config files, we will focus on the easy way."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install and Enable ",(0,a.kt)("a",{parentName:"li",href:"https://www.drupal.org/project/restui"},"REST UI module"),"."),(0,a.kt)("li",{parentName:"ul"},"Once installed, go to /admin/config/services/rest and enable your REST Resource."),(0,a.kt)("li",{parentName:"ul"},"Select your desired settings. Normally this is GET, JSON, and cookie for simple read only endpoints."),(0,a.kt)("li",{parentName:"ul"},"Go to permissions and enable anonymous and authenticated users to access your new endpoint.")),(0,a.kt)("h2",{id:"adjust-cors"},"Adjust CORS"),(0,a.kt)("p",null,"If this endpoint is to be accessed via JS, and you haven't already, you may need to adjust CORS parameters in your settings.yml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"    cors.config:\n    enabled: true\n    allowedHeaders: ['x-csrf-token','authorization','content-type','accept','origin','x-requested-with']\n    allowedMethods: ['*']\n    allowedOrigins: ['*']\n    exposedHeaders: true\n    maxAge: 1000\n    supportsCredentials: false\n")),(0,a.kt)("h2",{id:"caching-notes"},"Caching Notes"),(0,a.kt)("p",null,"Sometimes, we may need to specifically turn off the cache, or set a context for something like the URL or parameters. At its simplest, it can look like this example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function get() {\n  $build = [\n    '#cache' => [\n      'max-age' => 0,\n    ],\n  ];\n  // $filters defined here\n  $response['data'] = MyGeneralService::getStuffWithArgs($filters, NULL);\n  return (new ResourceResponse($response))->addCacheableDependency($build);\n}\n")),(0,a.kt)("h2",{id:"wysiwyg-notes"},"WYSIWYG Notes"),(0,a.kt)("p",null,'If using entity embeds/etc within WYSIWYG\'s, additional processing may be required. Below, we have made a WYSIWYG text format just for the REST view, and enabled things like "Display embedded entities". We then call it by machine name below.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$description = $result->body->value;\n$program['body'] = check_markup($description, \"MY_CUSTOM_TEXT_FORMAT\");\n")),(0,a.kt)("p",null,"After that, you are probably going to need to convert Relative to Absolute Image URL's. An easy option, is to use the ",(0,a.kt)("a",{parentName:"p",href:"https://www.drupal.org/project/rel_to_abs"},"Relative Path to Absolute URLs"),' module. Enable, then be sure it is both added to the REST text format above, with that filter running AFTER "Display embedded entities".'))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[3633],{5678:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"back-end/drupal/drupal-entities","title":"Entities","description":"Nodes","source":"@site/docs/back-end/drupal/drupal-entities.md","sourceDirName":"back-end/drupal","slug":"/back-end/drupal/drupal-entities","permalink":"/docs/back-end/drupal/drupal-entities","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/back-end/drupal/drupal-entities.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Configuration Management","permalink":"/docs/back-end/drupal/drupal-config-management"},"next":{"title":"Entity queries in drupal","permalink":"/docs/back-end/drupal/drupal-entity-queries"}}');var d=a(4848),t=a(8453);const l={},r="Entities",o={},s=[{value:"Nodes",id:"nodes",level:2},{value:"Preprocessing Nodes",id:"preprocessing-nodes",level:3},{value:"Baseline",id:"baseline",level:4},{value:"View Modes",id:"view-modes",level:4},{value:"Bundles",id:"bundles",level:4},{value:"Putting it all together",id:"putting-it-all-together",level:4},{value:"Working with Nodes",id:"working-with-nodes",level:3},{value:"Load node by NID",id:"load-node-by-nid",level:4},{value:"Get NID from loaded $node",id:"get-nid-from-loaded-node",level:4},{value:"Get Bundle from loaded $node",id:"get-bundle-from-loaded-node",level:4},{value:"Get field values from loaded $node",id:"get-field-values-from-loaded-node",level:4},{value:"Get media image URL from media reference field",id:"get-media-image-url-from-media-reference-field",level:4},{value:"Set field values from a loaded $node",id:"set-field-values-from-a-loaded-node",level:4},{value:"Delete Nodes",id:"delete-nodes",level:4},{value:"Paragraphs",id:"paragraphs",level:2},{value:"Programmatically create a paragraph",id:"programmatically-create-a-paragraph",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"entities",children:"Entities"})}),"\n",(0,d.jsx)(n.h2,{id:"nodes",children:"Nodes"}),"\n",(0,d.jsx)(n.h3,{id:"preprocessing-nodes",children:"Preprocessing Nodes"}),"\n",(0,d.jsx)(n.h4,{id:"baseline",children:"Baseline"}),"\n",(0,d.jsx)(n.p,{children:"We find it helpful to set up the following as a baseline on most projects:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"View mode: Full, teaser, etc. Lets us target Full views only, for some more complex processing, thus stopping it from running for teasers/etc."}),"\n",(0,d.jsx)(n.li,{children:"Bundle: We can then target nodes of particular bundles."}),"\n",(0,d.jsx)(n.li,{children:"NID: We use it quite a lot to pass parameters to views/etc, so simply handy to have."}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:" /**\n   * Implements hook_preprocess_HOOK() for page templates.\n   *\n   * @param $variables\n   */\nfunction MY_THEME_preprocess_node(&$variables) {\n  $node = $variables['elements']['#node'];\n  $view_mode = $variables['view_mode'];\n  $bundle = $node->bundle();\n  $nid = $node->id();\n}\n"})}),"\n",(0,d.jsx)(n.h4,{id:"view-modes",children:"View Modes"}),"\n",(0,d.jsx)(n.p,{children:'View modes are handy, because we often do not want to run certain functions "every time a node is loaded", rather, "every time a node is loaded for a particular view mode". For instance, in the below code, we will load:'}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["A variable ",(0,d.jsx)(n.code,{children:"{{ link }}"})," for teasers, which is the path to the full view of the content."]}),"\n",(0,d.jsxs)(n.li,{children:["A hero image URL, variable ",(0,d.jsx)(n.code,{children:"{{ hero_image_url }}"})," for the full view of the content."]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["You don't need ",(0,d.jsx)(n.code,{children:"{{ link }}"})," in the full view of the content, as you are already on the page. Conversely, no point loading the ",(0,d.jsx)(n.code,{children:"{{ hero_image_url }}"})," in a teaser, so lets save that processing power for other things."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"use Drupal\\media\\Entity\\Media;\nuse Drupal\\image\\Entity\\ImageStyle;\n\nif ($view_mode !== 'full') {\n  $variables['link'] = \\Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $nid);\n} else {\n  $variables['hero_image_url'] = '/path/to/sitewide/default/hero/image/here.png';\n  if ($node->hasField('MY_HERO_IMAGE_MEDIA_FIELD')) {\n    $image = $node->get('MY_HERO_IMAGE_MEDIA_FIELD')->getValue();\n    if ($image && !empty($image)) {\n      $entity = Media::load($image[0]['target_id']);\n      if (isset($entity) && $entity->field_media_image->entity !== NULL && $entity->field_media_image->entity->getFileUri() !== NULL) {\n        $variables['hero_image_url'] = ImageStyle::load('MY_HERO_IMAGE_STYLE')->buildUrl($entity->field_media_image->entity->getFileUri());\n      }\n    }\n  }\n}\n"})}),"\n",(0,d.jsx)(n.h4,{id:"bundles",children:"Bundles"}),"\n",(0,d.jsx)(n.p,{children:"Bundles let us target nodes by type. This allows us to do some things for NODE_TYPE_ONE, and other things for NODE_TYPE_TWO."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"if ($bundle == 'NODE_TYPE_ONE') {\n  // Do something for NODE_TYPE_ONE.\n} elseif ($bundle == 'NODE_TYPE_TWO') {\n  // Do something for NODE_TYPE_TWO.\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:["You could also use ",(0,d.jsx)(n.code,{children:"switch"})," if you prefer:"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"switch ($bundle) {\n  case 'NODE_TYPE_ONE':\n    // Do something for NODE_TYPE_ONE.\n  break;\n  case 'NODE_TYPE_TWO':\n    // Do something for NODE_TYPE_TWO.\n  break;\n}\n"})}),"\n",(0,d.jsx)(n.h4,{id:"putting-it-all-together",children:"Putting it all together"}),"\n",(0,d.jsx)(n.p,{children:"Combine Bundle and View Mode to fine tune any content you need to alter:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"if ($bundle == 'NODE_TYPE_ONE') {\n  if ($view_mode !== 'full') {\n    // Do something for NODE_TYPE_ONE teaser.\n  } else {\n    // Do something for NODE_TYPE_ONE full view.\n  }\n} elseif ($bundle == 'NODE_TYPE_TWO') {\n  if ($view_mode !== 'full') {\n    // Do something for NODE_TYPE_TWO teaser.\n  } else {\n    // Do something for NODE_TYPE_TWO full view.\n  }\n}\n"})}),"\n",(0,d.jsx)(n.h3,{id:"working-with-nodes",children:"Working with Nodes"}),"\n",(0,d.jsx)(n.h4,{id:"load-node-by-nid",children:"Load node by NID"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"$nid = 123;\n$node_storage = \\Drupal::entityTypeManager()->getStorage('node');\n$node = $node_storage->load($nid);\n"})}),"\n",(0,d.jsx)(n.h4,{id:"get-nid-from-loaded-node",children:"Get NID from loaded $node"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"$node->id();\n"})}),"\n",(0,d.jsx)(n.h4,{id:"get-bundle-from-loaded-node",children:"Get Bundle from loaded $node"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"$node->bundle();\n"})}),"\n",(0,d.jsx)(n.h4,{id:"get-field-values-from-loaded-node",children:"Get field values from loaded $node"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"$node->title->value;\n$node->created->value;\n$node->body->value;\n$node->body->summary;\n$node->MY_TEXT_FIELD->value;\n$node->MY_IMAGE_FIELD->target_id;\n"})}),"\n",(0,d.jsx)(n.h4,{id:"get-media-image-url-from-media-reference-field",children:"Get media image URL from media reference field"}),"\n",(0,d.jsx)(n.p,{children:"Always load image/media URLS as an appropriate image style."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"use Drupal\\media\\Entity\\Media;\nuse Drupal\\image\\Entity\\ImageStyle;\n\nif ($node->hasField('MY_HERO_IMAGE_MEDIA_FIELD')) {\n  $image = $node->get('MY_HERO_IMAGE_MEDIA_FIELD')->getValue();\n  if ($image && !empty($image)) {\n    $entity = Media::load($image[0]['target_id']);\n    if (isset($entity) && $entity->field_media_image->entity !== NULL && $entity->field_media_image->entity->getFileUri() !== NULL) {\n      $variables['hero_image_url'] = ImageStyle::load('MY_HERO_IMAGE_STYLE')->buildUrl($entity->field_media_image->entity->getFileUri());\n    }\n  }\n}\n"})}),"\n",(0,d.jsx)(n.h4,{id:"set-field-values-from-a-loaded-node",children:"Set field values from a loaded $node"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"$node->set('title', \"MY NEW TITLE\");\n$node->set('body', array(\n'summary' => \"MY NEW SUMMARY\",\n'value' => \"MY NEW FULL BODY\",\n'format' => 'basic_html',\n));\n$node->save();\n"})}),"\n",(0,d.jsx)(n.h4,{id:"delete-nodes",children:"Delete Nodes"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"// Single node by NID.\n$nid = 42;\n$node = $node_storage->load($nid);\n$node->delete();\n// Multiple nodes by NID.\n$nids = [21,12,45,67];\n$nodes = $node_storage->loadMultiple($nids);\n$node_storage->delete($nodes);\n// Multiple nodes by NID, loading one at a time to perform other functions.\n$nids = [21,12,45,67];\nforeach($nids as $nid)\n{\n  $node = $node_storage->load($nid);\n  // Do something else here if needed.\n  $node->delete();\n}\n"})}),"\n",(0,d.jsx)(n.h2,{id:"paragraphs",children:"Paragraphs"}),"\n",(0,d.jsx)(n.h3,{id:"programmatically-create-a-paragraph",children:"Programmatically create a paragraph"}),"\n",(0,d.jsx)(n.p,{children:"We sometimes find ourselves in the situation of needing to create referenced entities (usually paragraphs) based on if a field on a node/etc is filled out. Here is a basic example."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"use Drupal\\paragraphs\\Entity\\Paragraph;\nuse Drupal\\Core\\Entity\\EntityInterface;\n\n/**\n * Implements hook_entity_presave().\n */\nfunction MY_MODULE_entity_presave(EntityInterface $entity) {\n  switch ($entity->bundle()) {\n    case 'MY_NODE_BUNDLE':\n      if ($entity->field_artist_iaa_recipient->getValue()) {\n        $entity = _my_module_create_paragraph($entity);\n      }\n      break;\n  }\n}\n"})}),"\n",(0,d.jsx)(n.p,{children:"Then create the paragraph and attach to the entity, and deliver entity back to the update/similar hook."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",children:"function _MY_MODULE_create_awards_paragraph($entity) {\n  // Process the $entity for any needed values/logic/etc, from a trigger field on the entity/node.\n  $trigger = $entity->FIELD_MY_TRIGGER_FIELD->value;\n\n  // Create paragraph\n  $paragraph = Paragraph::create(['type' => 'MY_PARAGRAPH_BUNDLE']);\n  $paragraph->set('FIELD_MY_FIELD', $trigger);\n  $paragraph->isNew();\n  $paragraph->save();\n  // Grab any existing paragraphs from the node, and add this one\n  $current = $entity->get('FIELD_REFERENCE_FIELD_ON_NODE')->getValue();\n  $current[] = array(\n      'target_id' => $paragraph->id(),\n      'target_revision_id' => $paragraph->getRevisionId(),\n    );\n  $entity->set('FIELD_REFERENCE_FIELD_ON_NODE', $current);\n  // If needed, Unset trigger field so does not run again.\n  $entity->set('FIELD_MY_TRIGGER_FIELD', []);\n  return $entity;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>r});var i=a(6540);const d={},t=i.createContext(d);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[5168],{8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var s=n(6540);const t={},a=s.createContext(t);function l(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:i},e.children)}},9581:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"back-end/drupal/drupal-sitebuilding","title":"Drupal 8 Site Building","description":"General Requirements/Best practices","source":"@site/docs/back-end/drupal/drupal-sitebuilding.md","sourceDirName":"back-end/drupal","slug":"/back-end/drupal/drupal-sitebuilding","permalink":"/docs/back-end/drupal/drupal-sitebuilding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/back-end/drupal/drupal-sitebuilding.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Simplesamlphp (per page) password protection in drupal","permalink":"/docs/back-end/drupal/drupal-simplesamlphp-password-protection"},"next":{"title":"Drupal Social Share","permalink":"/docs/back-end/drupal/drupal-social-share"}}');var t=n(4848),a=n(8453);const l={},r="Drupal 8 Site Building",o={},d=[{value:"General Requirements/Best practices",id:"general-requirementsbest-practices",level:2},{value:"settings.php",id:"settingsphp",level:3},{value:"Example settings.php acquia multi-site conditional",id:"example-settingsphp-acquia-multi-site-conditional",level:4},{value:"Example settings.local.php, or development.settings.php",id:"example-settingslocalphp-or-developmentsettingsphp",level:4},{value:"services.yml",id:"servicesyml",level:3},{value:"Example development.services.yml",id:"example-developmentservicesyml",level:4},{value:"Redirects",id:"redirects",level:4},{value:"Example on acquia",id:"example-on-acquia",level:5},{value:"idfive base theme",id:"idfive-base-theme",level:2},{value:"idfive base theme via the IAL",id:"idfive-base-theme-via-the-ial",level:3},{value:"idfive ICL paragraphs module",id:"idfive-icl-paragraphs-module",level:2},{value:"Extending ICL paragraphs",id:"extending-icl-paragraphs",level:3},{value:"Section/widget wrappers",id:"sectionwidget-wrappers",level:4},{value:"Recommended contrib modules",id:"recommended-contrib-modules",level:2},{value:"Recommended contrib modules via the IAL",id:"recommended-contrib-modules-via-the-ial",level:3},{value:"Custom Module/Theme Development",id:"custom-moduletheme-development",level:2},{value:"Theme/Module best practices",id:"thememodule-best-practices",level:3},{value:"Admin UX",id:"admin-ux",level:4},{value:"Help Text",id:"help-text",level:4},{value:"Hook_help example",id:"hook_help-example",level:5},{value:"Hook_field_WIDGET_TYPE_paragraphs_form_alter",id:"hook_field_widget_type_paragraphs_form_alter",level:5},{value:"Libraries",id:"libraries",level:4},{value:"Global, via a .info.yml",id:"global-via-a-infoyml",level:5},{value:"Via a hook_preprocess",id:"via-a-hook_preprocess",level:5},{value:"In twig template",id:"in-twig-template",level:5},{value:"Javascript variables from the server",id:"javascript-variables-from-the-server",level:4},{value:"Images",id:"images",level:4},{value:"Media Module",id:"media-module",level:5},{value:"Image Optimize",id:"image-optimize",level:5},{value:"Focal Point",id:"focal-point",level:5},{value:"Lazy Loading",id:"lazy-loading",level:5},{value:"Image Styles",id:"image-styles",level:5},{value:"Responsive Images",id:"responsive-images",level:5},{value:"Example theme_name.breakpoints.yml",id:"example-theme_namebreakpointsyml",level:6},{value:"Metatags",id:"metatags",level:4},{value:"View Modes",id:"view-modes",level:4},{value:"Adding view modes",id:"adding-view-modes",level:5},{value:"View mode templates",id:"view-mode-templates",level:5},{value:"Regions and blocks",id:"regions-and-blocks",level:4},{value:"Scoping",id:"scoping",level:4},{value:"Fields",id:"fields",level:5},{value:"Functions",id:"functions",level:5},{value:"Variables",id:"variables",level:5},{value:"Views/Lists",id:"viewslists",level:4},{value:"If the view content is local and requires filters",id:"if-the-view-content-is-local-and-requires-filters",level:5},{value:"If the view content is local does not require filters",id:"if-the-view-content-is-local-does-not-require-filters",level:5},{value:"Views example",id:"views-example",level:6},{value:"Custom cached node query",id:"custom-cached-node-query",level:6},{value:"If the content is NOT local",id:"if-the-content-is-not-local",level:5},{value:"Custom API Call example",id:"custom-api-call-example",level:6},{value:"Pathauto",id:"pathauto",level:4},{value:"Prepping to ship/launch",id:"prepping-to-shiplaunch",level:3},{value:"Dependencies",id:"dependencies",level:4},{value:"Versioning",id:"versioning",level:4},{value:"Packagist",id:"packagist",level:4},{value:"Example composer.json",id:"example-composerjson",level:5},{value:"PHP CodeSniffer/Drupal Coder",id:"php-codesnifferdrupal-coder",level:4},{value:"Drupal Check",id:"drupal-check",level:4},{value:"ESLint",id:"eslint",level:4}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"drupal-8-site-building",children:"Drupal 8 Site Building"})}),"\n",(0,t.jsx)(i.h2,{id:"general-requirementsbest-practices",children:"General Requirements/Best practices"}),"\n",(0,t.jsx)(i.h3,{id:"settingsphp",children:"settings.php"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["A more advanced, and awesome way of setting up settings.php can be seen in ",(0,t.jsx)(i.a,{href:"https://vimeo.com/840496602/994689054a?share=copy",children:"Multisite Config 201"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"Always remove commented out example code when possible. This example code is always still available at default.settings.php, but removing it from settings.php makes the file more condense, and it is easier to see what is actually being used."}),"\n",(0,t.jsxs)(i.li,{children:["Always, if needed, include a settings.local.php, so that your local dev env can run differently: ",(0,t.jsx)(i.code,{children:"if (file_exists($app_root . '/' . $site_path . '/settings.local.php')) { include $app_root . '/' . $site_path . '/settings.local.php'; }"})]}),"\n",(0,t.jsxs)(i.li,{children:["Be sure ",(0,t.jsx)(i.code,{children:"docroot/sites/*/settings.local.php"})," is in the .gitignore."]}),"\n",(0,t.jsx)(i.li,{children:"Mostly, this will allow caches/aggregation/etc to be disabled for easier developing."}),"\n",(0,t.jsx)(i.li,{children:"For things like acquia multi-sites, this can also be set in settings.php in a conditional block, as an include to development.settings.php, so that all local sites get it."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"example-settingsphp-acquia-multi-site-conditional",children:"Example settings.php acquia multi-site conditional"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"  // Check/modify any acquia environment specific modifications needed.\n  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {\n    // Acquia specific stuff\n  }\n  else {\n    // Do something for a non-Acquia-hosted application, ie, load local dev settings.\n    if (file_exists($app_root . '/sites/development.settings.php')) {\n      include $app_root . '/sites/development.settings.php';\n    }\n  }\n"})}),"\n",(0,t.jsx)(i.p,{children:'By loading in this way (globally for all local sites), all local dev sites get the more "dev env" settings, and you can still use settings.local.php for any actual local settings changes needed.'}),"\n",(0,t.jsx)(i.h4,{id:"example-settingslocalphp-or-developmentsettingsphp",children:"Example settings.local.php, or development.settings.php"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"  <?php\n\n  // @codingStandardsIgnoreFile\n\n  /**\n  * @file\n  * Local development override configuration feature.\n  */\n\n  assert_options(ASSERT_ACTIVE, TRUE);\n  \\Drupal\\Component\\Assertion\\Handle::register();\n\n  $settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';\n  $config['system.logging']['error_level'] = 'verbose';\n  $config['system.performance']['css']['preprocess'] = FALSE;\n  $config['system.performance']['js']['preprocess'] = FALSE;\n  $settings['cache']['bins']['render'] = 'cache.backend.null';\n  $settings['cache']['bins']['page'] = 'cache.backend.null';\n  $settings['rebuild_access'] = TRUE;\n  $settings['skip_permissions_hardening'] = TRUE;\n"})}),"\n",(0,t.jsx)(i.h3,{id:"servicesyml",children:"services.yml"}),"\n",(0,t.jsx)(i.p,{children:"When possible, always add a development services.yml to the codebase. This will set up the local dev env to show twig templates/etc, and make it easier to develop."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Be sure it is in the '/docroot/sites/development.services.yml' or similar, so it may be used across multi-sites."}),"\n",(0,t.jsxs)(i.li,{children:["Be sure ",(0,t.jsx)(i.code,{children:"$settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';"}),", with the proper path, is set in the settings.local.php. For multi-sites, especially on acquia, this can also be set in development.settings.php."]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"example-developmentservicesyml",children:"Example development.services.yml"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"  # Local development services.\n  #\n  # To activate this feature, follow the instructions at the top of the\n  # 'example.settings.local.php' file, which sits next to this file.\n  parameters:\n    http.response.debug_cacheability_headers: true\n    twig.config:\n      debug: true\n      auto_reload: true\n      cache: false\n  services:\n    cache.backend.null:\n      class: Drupal\\Core\\Cache\\NullBackendFactory\n"})}),"\n",(0,t.jsx)(i.h4,{id:"redirects",children:"Redirects"}),"\n",(0,t.jsx)(i.p,{children:"If possible, high level URL redirects should be performed via settings.php, not in .htaccess. This is because .htaccess has the potential to be overridden during core updates."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'All minor "old page to new page" redirects should be done via the redirect module.'}),"\n",(0,t.jsx)(i.li,{children:'This is for high level changes, like "x.mysite.edu and y.mysite.edu should all redirect to z.mysite.edu".'}),"\n",(0,t.jsxs)(i.li,{children:["Be sure to wrap in a check for drush, so that drush requests are not redirected, via ",(0,t.jsx)(i.code,{children:"if (!function_exists('drush_main')) {}"}),"."]}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"example-on-acquia",children:"Example on acquia"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"// Check/modify any acquia environment specific modifications needed.\nif (isset($_ENV['AH_SITE_ENVIRONMENT'])) {\n  switch ($_ENV['AH_SITE_ENVIRONMENT']) {\n    case 'prod':\n      if (!function_exists('drush_main')) {\n        if ($_SERVER['HTTP_HOST'] != 'MYSITE.com') {\n          header('HTTP/1.0 301 Moved Permanently');\n          header('Location: https://' . 'MYSITE.com' . $_SERVER['REQUEST_URI']);\n          exit();\n        }\n      }\n      break;\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"idfive-base-theme",children:"idfive base theme"}),"\n",(0,t.jsxs)(i.p,{children:["The idfive base theme is intentionally pretty bare bones, but provides us with lots of behind the scenes functions we need. This theme is designed to act as a parent theme, and should never be enabled directly. See the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library-d8-theme",children:"documentation"})," for how to best use this theme, and how to quickly and efficiently spin up a child theme for any client project."]}),"\n",(0,t.jsx)(i.p,{children:"It uses the core stable theme as a base (drupal assigns this automatically to all themes that do not specify a base). This is to ensure some level of backwards template compatibility throughout the drupal 7/8 life cycle."}),"\n",(0,t.jsx)(i.p,{children:"The docroot and actual folders may vary, depending on your codebase, but in general, adding the idfive base theme, and creating your custom child theme will look like:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"composer require idfive/idfive"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"cd docroot/themes/custom/idfive/starterkits"})}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"sudo bash generate_kit.sh"})," This will run a bash script, that prompts you for a human readable name, and a machine name for your custom child theme. From that, the script will generate a child theme, and install a fresh copy of the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library",children:"idfive Component Libray"})," which is the preferred framework for all idfive projects."]}),"\n",(0,t.jsx)(i.li,{children:"enable your new child theme."}),"\n",(0,t.jsx)(i.li,{children:'You will need to adjust .gitignore in the idfive-component-library to track the "build" folder if no CI is used.'}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["You may need to adjust folders/etc as stated above, depending on the projects composer setup. See the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library-d8-theme",children:"documentation"})," for more information."]}),"\n",(0,t.jsx)(i.h3,{id:"idfive-base-theme-via-the-ial",children:"idfive base theme via the IAL"}),"\n",(0,t.jsxs)(i.p,{children:["Install the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-automation-library",children:"idfive Automation Library"})," and run the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-automation-library/src/master/drupal/general/partials/add_icl_theme.sh",children:"Add ICL Theme"})," script."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:'sh ~/Sites/_ial/drupal/general/partials/add_icl_theme.sh "YOUR CHILD THEME HR NAME" YOUR_CHILD_THEME_MACHINE_NAME'})}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"idfive-icl-paragraphs-module",children:"idfive ICL paragraphs module"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library-d8-paragraphs",children:"idfive Component Library D8 Paragraphs"})," module, provides several common idfive ICL patterns as pre-made widgets, to add to a Kitchen Sink page."]}),"\n",(0,t.jsx)(i.p,{children:"The docroot and actual folders may vary, depending on your codebase, but in general, adding the idfive ICL Paragraphs widget is best done via composer:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"composer require idfive/idfive_paragraphs"})}),"\n",(0,t.jsx)(i.li,{children:'Add a paragraphs field to desired content, be sure the widget is "Paragraphs Experimental" in the form display.'}),"\n",(0,t.jsx)(i.li,{children:"Be sure to exclude certain ICL widget types so marked in their descriptions, from this field."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"This is intentionally bare bones, and simply designed to save time by adding a suite of common KS widgets from the ICL, such as tables accordions/etc."}),"\n",(0,t.jsx)(i.h3,{id:"extending-icl-paragraphs",children:"Extending ICL paragraphs"}),"\n",(0,t.jsx)(i.h4,{id:"sectionwidget-wrappers",children:"Section/widget wrappers"}),"\n",(0,t.jsx)(i.p,{children:"The preferred method for adding wrappers, ie sections, or whatever, to ICL widgets, is with a field template override of the field used to add the widgets. This lets us change per content type/etc if needed."}),"\n",(0,t.jsxs)(i.p,{children:["For example, if KS widgets are being added via ",(0,t.jsx)(i.code,{children:"field_basic_page_ks_widgets"}),", field--node--field_basic_page_ks_widgets.html.twig could have the following:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"{% for item in items %}\n  {%\n    set classes = [\n      'section',\n      'section-' ~ element['#bundle'],\n      'section-' ~ item.content['#paragraph'].getType()\n    ]\n  %}\n  <div class=\"{{ classes|join(' ') }}\">\n    {{ item.content }}\n  </div>\n{% endfor %}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["This would result in an output of ",(0,t.jsx)(i.code,{children:'<div class="section section-basic_page section-PARAGRAPH_TYPE">'})," as a wrapper for each widget."]}),"\n",(0,t.jsx)(i.h2,{id:"recommended-contrib-modules",children:"Recommended contrib modules"}),"\n",(0,t.jsxs)(i.p,{children:["See the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-automation-library",children:"idfive Automation Library"})," script, ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-automation-library/src/master/drupal/general/partials/add_icl_modules.sh",children:"Add ICL Modules"})," for an up to date list of what idfive recommends as a baseline."]}),"\n",(0,t.jsx)(i.h3,{id:"recommended-contrib-modules-via-the-ial",children:"Recommended contrib modules via the IAL"}),"\n",(0,t.jsxs)(i.p,{children:["Install the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-automation-library",children:"idfive Automation Library"})," and run the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-automation-library/src/master/drupal/general/partials/enable_icl_modules.sh",children:"Add ICL Modules"})," script."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"ssh ~/Sites/_ial/drupal/general/partials/add_icl_modules.sh"})}),"\n",(0,t.jsxs)(i.li,{children:["You may also then enable via ",(0,t.jsx)(i.code,{children:"sh ~/Sites/_ial/drupal/general/partials/enable_icl_modules.sh"})]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"custom-moduletheme-development",children:"Custom Module/Theme Development"}),"\n",(0,t.jsx)(i.h3,{id:"thememodule-best-practices",children:"Theme/Module best practices"}),"\n",(0,t.jsx)(i.h4,{id:"admin-ux",children:"Admin UX"}),"\n",(0,t.jsx)(i.p,{children:"When adding/arranging fields on entities and forms, give careful consideration to how things are ordered/labeled/layed out. It is extremely important that the admin UX be as clean, and straightforward as possible for admins to use the site effectively."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Consider using field groups in display to group fields into collapsed details/fieldsets."}),"\n",(0,t.jsx)(i.li,{children:"Consider setting up tabs for large, complex entities, with the tabs corresponding to naming seen on frontend sections."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"help-text",children:"Help Text"}),"\n",(0,t.jsx)(i.p,{children:"Help text is normally aimed at admins and site builders, and is necessary to provide a great admin experience. It is easy to overlook this, but it is the key to providing a great admin experience, and sometimes even for developers to more readily understand what is going on when revisiting older projects."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["All custom modules should, at a minimum utilize a ",(0,t.jsx)(i.code,{children:"hook_help()"})," to show the modules (properly formatted) README.md."]}),"\n",(0,t.jsx)(i.li,{children:"Consider adding help text/etc to entity add/edit forms to explain how things work, and best practices."}),"\n",(0,t.jsx)(i.li,{children:'Consider adding markup fields to entities (like a homepage) to explain how things "not controlled within the form" work, like feeds from views and external API\'s. For example: "The blogs feed displays the 3 most recent blog posts tagged with X".'}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://www.drupal.org/docs/develop/documenting-your-project/help-text-standards",children:"drupal help text standards"})}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"hook_help-example",children:"Hook_help example"}),"\n",(0,t.jsx)(i.p,{children:"Displays the README.md as for the help page of a module. Loads markdown module for better formatting if present."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"<?php\n\n/**\n * @file\n * My custom module file.\n */\n\nuse Drupal\\Core\\Routing\\RouteMatchInterface;\n\n/**\n * Implements hook_help().\n *\n * @inheritdoc\n */\nfunction MY_MODULE_help($route_name, RouteMatchInterface $route_match) {\n  switch ($route_name) {\n    case 'help.page.MY_MODULE':\n      $text = file_get_contents(dirname(__FILE__) . \"/README.md\");\n      if (!\\Drupal::moduleHandler()->moduleExists('markdown')) {\n        return '<pre>' . $text . '</pre>';\n      }\n      else {\n        // Use the Markdown filter to render the README.\n        $filter_manager = \\Drupal::service('plugin.manager.filter');\n        $settings = \\Drupal::configFactory()->get('markdown.settings')->getRawData();\n        $config = ['settings' => $settings];\n        $filter = $filter_manager->createInstance('markdown', $config);\n        return $filter->process($text, 'en');\n      }\n  }\n  return NULL;\n}\n"})}),"\n",(0,t.jsx)(i.h5,{id:"hook_field_widget_type_paragraphs_form_alter",children:"Hook_field_WIDGET_TYPE_paragraphs_form_alter"}),"\n",(0,t.jsx)(i.p,{children:"Provides customized help text for a custom paragraphs module, so that you may point clients in the right direction and provide tips, best practices, and context. To note the following only works with the new paragraphs display, if using legacy, you will need to change to the appropriate widget type in the following hook."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"/**\n * Implements hook_field_WIDGET_TYPE_paragraphs_form_alter().\n *\n * Adds helper text to the paragraph.\n */\nfunction MY_MODULE_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {\n  if ($element['#paragraph_type'] == 'MY_PARAGRAPH') {\n    // Tips text from idfive.\n    $markup = '<h3>Do:</h3><ul>';\n    $markup .= '<li><strong>Use blockquotes to break up long copy.</strong> A brief quote can provide visual interest and offset larger text blocks.</li>';\n    $markup .= '<li><strong>Use plain text.</strong> Avoid including links or other styled elements.</li>';\n    $markup .= '</ul>';\n    $markup .= '<h3>Do Not:</h3><ul>';\n    $markup .= '<li><strong>Use an overly long quote.</strong> Often block quotes use font sizes/weights that can be overwhelming if used for copy that is very long.</li>';\n    $markup .= '<li><strong>Place a blockquote as the last element on the page.</strong></li>';\n    $markup .= '</ul>';\n    $markup .= '<p><a target=\"_blank\" href=\"/admin/help/MY_MODULE\">My Module Help</a></p>';\n    $element['MY_PARAGRAPH_tips'] = [\n      '#type' => 'details',\n      '#title' => t('MY_PARAGRAPH Content Tips'),\n      '#weight' => -1000,\n    ];\n    $element['MY_PARAGRAPH_tips']['#markup'] = $markup;\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"libraries",children:"Libraries"}),"\n",(0,t.jsx)(i.p,{children:"Most times, any custom css/js should be attached globally. There are a few instances where this may not be desireable, for instance if there were extremely large css/js files that only ran one specific function on specific pages, like a homepage."}),"\n",(0,t.jsx)(i.h5,{id:"global-via-a-infoyml",children:"Global, via a .info.yml"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yml",children:"name: MY_THEME\ntype: theme\ndescription: An amazingly awesome theme I just built.\ncore: 8.x\nlibraries:\n  - MY_THEME/something-homepage-specific\n"})}),"\n",(0,t.jsx)(i.h5,{id:"via-a-hook_preprocess",children:"Via a hook_preprocess"}),"\n",(0,t.jsx)(i.p,{children:"Choose this if you want to add to pages of multiple, types, maybe based on a URL path or the like."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"function MY_THEME_preprocess_page(&$variables) {\n  // Example of a check here, for front page, but could be anything.\n  if ($variables['is_front'] == TRUE) {\n    $variables['#attached']['library'][] = 'MY_THEME/something-homepage-specific';\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h5,{id:"in-twig-template",children:"In twig template"}),"\n",(0,t.jsx)(i.p,{children:"Use this if the library in question is only needed on this particular template, and no others. Specifically helpful for things like custom paragraphs."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-twig",children:"{# only attach our library if this is node 1 #}\n{% if node.id == 1 %}\n  {{ attach_library('MY_THEME/something-homepage-specific') }}\n{% endif %}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"javascript-variables-from-the-server",children:"Javascript variables from the server"}),"\n",(0,t.jsx)(i.p,{children:"Pass a dynamic value from the server (PHP) to client-side JavaScript using the drupalSettings library. Sometimes this is needed in order for some custom JS to run, but in general, shy away if possible."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"function MY_THEME_page_attachments_alter(array &$page) {\n  // We're going to pass along the user's display name to our front-end code.\n  $account = \\Drupal::currentUser();\n  if ($account->isAuthenticated()) {\n    $page['#attached']['library'][] = 'MY_THEME/my-custom-js';\n    // We pass along our dynamic value.\n    // This will then be available in our JavaScript as drupalSettings.friendly.name.\n    $page['#attached']['drupalSettings']['MY_THEME']['name'] = $account->getDisplayName();\n  }\n}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["In this case ",(0,t.jsx)(i.code,{children:"drupalSettings.MY_THEME.name"})," will now be available to the JavaScript file in our asset library."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"(function (Drupal) {\n  if (drupalSettings.MY_THEME.name) {\n    var siteName = document.getElementsByClassName('site-branding__name')[0];\n    siteName.getElementsByTagName('a')[0].innerHTML = '<h1>Howdy, ' + drupalSettings.MY_THEME.name + '!</h1>';\n  }\n})(Drupal);\n"})}),"\n",(0,t.jsx)(i.h4,{id:"images",children:"Images"}),"\n",(0,t.jsx)(i.h5,{id:"media-module",children:"Media Module"}),"\n",(0,t.jsx)(i.p,{children:"Core media module should be used for all D8 projects, unless there is a good reason not to."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library-d8-paragraphs",children:"idfive Component Library D8 Paragraphs"})," module ships with several entity browsers. These should be used as the form display choice for media fields, as it narrows down by type, as well as adds an upload option."]}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"image-optimize",children:"Image Optimize"}),"\n",(0,t.jsxs)(i.p,{children:["Use ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/project/imageapi_optimize",children:"ImageAPI Optimize"})," (",(0,t.jsx)(i.a,{href:"https://www.drupal.org/project/imageapi_optimize_resmushit",children:"re.Smush.it"}),", ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/project/imageapi_optimize_tinypng",children:"TinyPNG"})," or other services) to optimize images as they are uploaded and used in image styles. It is important that these be set up/enabled early so that all images uploaded can benefit from optimization throughout the build process."]}),"\n",(0,t.jsx)(i.h5,{id:"focal-point",children:"Focal Point"}),"\n",(0,t.jsxs)(i.p,{children:["Use the ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/project/focal_point",children:"Focal Point"})," module on projects when a single image may be used across multiple image styles/crops. Once installed:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Change the widget of the media",":image"," entity form display (",(0,t.jsx)(i.code,{children:"/admin/structure/media/manage/image/form-display"}),') to "Image (Focal Point)".']}),"\n",(0,t.jsx)(i.li,{children:'For any image style you wish to use this feature on, adjust the effects to use either "Focal Point Crop" or "Focal Point Scale and Crop".'}),"\n",(0,t.jsxs)(i.li,{children:["Now when adding a media",":image",' entity, you will be presented with the focal point thumbnail where you may define a focal point, and any image styles throughout the site that use a focal point effect, should be available via the "preview" link.']}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"lazy-loading",children:"Lazy Loading"}),"\n",(0,t.jsxs)(i.p,{children:["If the build uses the ICL, consider enabling the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library-d8-paragraphs/src/8.x-2.x/modules/idfive_lazyload/",children:"idfive Lazyload"})," module. Note: The lazyload JS must be in the theme for this to wok."]}),"\n",(0,t.jsx)(i.h5,{id:"image-styles",children:"Image Styles"}),"\n",(0,t.jsx)(i.p,{children:"Image styles should be utilized for all images being output in a template. This allows us to set parameters for size/etc, as well as ImageApi Optimize."}),"\n",(0,t.jsx)(i.h5,{id:"responsive-images",children:"Responsive Images"}),"\n",(0,t.jsxs)(i.p,{children:["The core responsive images module helps us to define different image styles for different breakpoints. This does require custom config setup of breakpoints. See ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/docs/8/theming-drupal-8/working-with-breakpoints-in-drupal-8",children:"Working with Breakpoints"}),'. This requires a bit of setup so should be defined/used for the larger hero images/etc, but may not make sense for "All Images".']}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Enable responsive image module."}),"\n",(0,t.jsx)(i.li,{children:"Compile a list of breakpoints, usually by looking at the static frontend."}),"\n",(0,t.jsx)(i.li,{children:"Create YOUR_THEME_OR_MODULE.breakpoints.yml utilizing the above, located in the root of the custom module or themes root folder, and clear cache."}),"\n",(0,t.jsx)(i.li,{children:"Add a new desired responsive image style"}),"\n",(0,t.jsx)(i.li,{children:'Add new view mode for Image Media Type, as "Responsive Image", using added breakpoints.'}),"\n",(0,t.jsx)(i.li,{children:'Set up display for image field in "Responsive Image" display to be Responsive Image, and the responsive image style you created.'}),"\n",(0,t.jsx)(i.li,{children:"Add media field of type image to content, under Manage display, choose Rendered entity > Render as Responsive Image."}),"\n"]}),"\n",(0,t.jsx)(i.h6,{id:"example-theme_namebreakpointsyml",children:"Example theme_name.breakpoints.yml"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yml",children:"theme_name.imagesize.mobile:\n  label: Mobile\n  mediaQuery: ''\n  weight: 0\n  multipliers:\n    - 1x\n  group: THEME NAME Image Sizes\ntheme_name.imagesize.tablet:\n  label: Tablet\n  mediaQuery: 'all and (min-width: 560px) and (max-width: 900px)'\n  weight: 1\n  multipliers:\n    - 1x\n  group: THEME NAME Image Sizes\ntheme_name.imagesize.desktop:\n  label: Desktop\n  mediaQuery: 'all and (min-width: 901px)'\n  weight: 2\n  multipliers:\n    - 1x\n  group: THEME NAME Image Sizes\n"})}),"\n",(0,t.jsx)(i.h4,{id:"metatags",children:"Metatags"}),"\n",(0,t.jsxs)(i.p,{children:["Default metatags (from the metatags module) are usually fine. One caveat is the og",":image"," tag."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Consider adding a default social share image for the entire site."}),"\n",(0,t.jsx)(i.li,{children:"Consider overriding that, or adding to, for content like news and events."}),"\n",(0,t.jsxs)(i.li,{children:["Since we use media module, utilize a token within the og",":image"," metatag, like: ",(0,t.jsx)(i.code,{children:"[node:MEDIA_FIELD_ON_NODE:entity:field_media_image:DESIRED_IMAGE_STYLE:url]"})]}),"\n",(0,t.jsx)(i.li,{children:"Multiple images may be added in this field, and the particular service (twitter/facebook/etc) will choose the one it wants, usually the largest. For this reason, be sure the chosen image style of the media field is physically larger than the site default share image."}),"\n",(0,t.jsxs)(i.li,{children:["A complete example for the og",":image"," metatag field, could look like: ",(0,t.jsx)(i.code,{children:"/themes/custom/MY_AWESOME_THEME/social/MY_AWESOME_SOCIAL_SHARE_DEFAULT.jpg, [node:field_featured_image:entity:field_media_image:large:url]"}),"."]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"view-modes",children:"View Modes"}),"\n",(0,t.jsx)(i.p,{children:"How an entity (such as content, a user , etc) is displayed, depends on the context in which it is shown. This context is known as a view mode. Examples of view modes for one content type (article) is:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Full article"}),"\n",(0,t.jsx)(i.li,{children:"Teaser article view"}),"\n",(0,t.jsx)(i.li,{children:"Card article view"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:'The main idea being, in combined views of content, you can now say "show me 3 articles that match XYZ, and display as cards". Now, when using  things like views, we don\'t need to customize the output, we simply tell it which view mode to display.'}),"\n",(0,t.jsx)(i.h5,{id:"adding-view-modes",children:"Adding view modes"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["View modes can be added ",(0,t.jsx)(i.code,{children:"/admin/structure/display-modes/view"}),'. Ideally, the names should span content types, so that something like a "card view" can be used for articles, events, etc.']}),"\n",(0,t.jsxs)(i.li,{children:["On ",(0,t.jsx)(i.code,{children:"/admin/structure/types/manage/MY_ENTITY/display"}),', under "custom display settings", choose the desired view modes.']}),"\n",(0,t.jsx)(i.li,{children:"Configure the display of each view mode, for each desired entity."}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"view-mode-templates",children:"View mode templates"}),"\n",(0,t.jsxs)(i.p,{children:["Each view mode can get its own template within the theme. Generally, we prefer to group them by entity and bundle, so that all view modes for a particular entity/bundle are in the same folder within the theme. The naming convention is ",(0,t.jsx)(i.code,{children:"ENTITY--BUNDLE--VIEW-MODE.html.twig"}),"."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"templates\n  node\n    NODE-TYPE\n      node--NODE-TYPE--card.html.twig\n      node--NODE-TYPE--teaser.html.twig\n      node--NODE-TYPE.html.twig\n"})}),"\n",(0,t.jsx)(i.h4,{id:"regions-and-blocks",children:"Regions and blocks"}),"\n",(0,t.jsx)(i.p,{children:"In general, we prefer not to use blocks excessively in drupal sites. The blocks we generally use, are limited mainly to:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Menu Blocks"}),"\n",(0,t.jsx)(i.li,{children:"Breadcrumbs"}),"\n",(0,t.jsx)(i.li,{children:"Main Content"}),"\n",(0,t.jsx)(i.li,{children:"Messages"}),"\n",(0,t.jsx)(i.li,{children:"Admin tabs (though the admin menu edit tab mods in the idfive theme mainly eliminate this need)"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"We find that setting custom content (views/lists/related articles/etc) is better accomplished at the entity_preprocess level, and added to the templates, per entity type, where needed, rather than relying on lots of blocks."}),"\n",(0,t.jsxs)(i.p,{children:["With that in mind, since regions are mainly to hold blocks, regions within the theme are usually created in regards to where breadcrumbs, or menus need to be. As an example, the following regions are set in the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library-d8-theme",children:"idfive base theme"}),", and are a good example:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"primary_menu: 'Primary menu'"}),"\n",(0,t.jsx)(i.li,{children:"secondary_menu: 'Secondary menu'"}),"\n",(0,t.jsx)(i.li,{children:"utility_menu: 'Utility menu'"}),"\n",(0,t.jsx)(i.li,{children:"breadcrumbs: 'Breadcrumbs'"}),"\n",(0,t.jsx)(i.li,{children:"page_sidebar: 'Page Sidebar'"}),"\n",(0,t.jsx)(i.li,{children:"content: 'Content'"}),"\n",(0,t.jsx)(i.li,{children:"footer_menu: 'Footer menu'"}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["It is also worth noting, that the ",(0,t.jsx)(i.a,{href:"https://bitbucket.org/idfivellc/idfive-component-library-d8-theme",children:"idfive base theme"})," includes preprocess functions to make these regions available to the node template as well, so things like the sidebar, can be added in the node template, rather than page template, to simplify design ingestion."]}),"\n",(0,t.jsx)(i.h4,{id:"scoping",children:"Scoping"}),"\n",(0,t.jsx)(i.p,{children:"In general, we want to scope most custom elements to the parent theme/module/etc, to include, but not limited to:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Fields"}),"\n",(0,t.jsx)(i.li,{children:"Functions"}),"\n",(0,t.jsx)(i.li,{children:"Variables"}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"fields",children:"Fields"}),"\n",(0,t.jsx)(i.p,{children:'Fields should be scoped to the controlling entity. Fields can be shared in certain instances (like between sub-modules), but in that instance would be scoped to the parent module.\nFor example, a text field used by the "CLIENT Paragraphs" module, could be scoped as machine names:'}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"field_cp_text"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"cp_text"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"client_paragraphs_text"})}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(i.p,{children:'Custom functions belonging to modules or themes should be scoped as "underscore + module/theme name + description".\nFor example, custom functions in the "CLIENT Paragraphs" module, could be scoped as:'}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"_client_paragraphs_format_into_list"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"_client_paragraphs_get_external_news"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"_client_paragraphs_get_external_events"})}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"variables",children:"Variables"}),"\n",(0,t.jsx)(i.p,{children:"Custom variables should be scoped to the module/theme that creates them, and the entity that uses them.\nFor example, if I were getting a list of events for the homepage, my variable for that could be scoped as:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"cp_homepage_events"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"client_paragraphs_events_for_homepage"})}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"viewslists",children:"Views/Lists"}),"\n",(0,t.jsx)(i.p,{children:'Preferably, all "lists of content" should use a view mode to display them. Ie, "show me all content of type X, displayed as view mode \'search result\'"'}),"\n",(0,t.jsx)(i.h5,{id:"if-the-view-content-is-local-and-requires-filters",children:"If the view content is local and requires filters"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Consider using core views module, with an exposed form."}),"\n",(0,t.jsxs)(i.li,{children:["If more complex, consider using core views along with ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/project/search_api",children:"Search API module"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"For smaller, custom sortable views, consider a vue.js app, that interacts with the jsonapi endpoint or similar."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:'If core views is used as a standalone, or with search API, be sure to crate the display type as "block" or similar (not page), so that these views can be inserted into standard KS pages using the ip_views_embed widget, thus allowing for custom text, headers, content, etc as well as the listing.'}),"\n",(0,t.jsx)(i.h5,{id:"if-the-view-content-is-local-does-not-require-filters",children:"If the view content is local does not require filters"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Consider using core views module."}),"\n",(0,t.jsx)(i.li,{children:"Consider a custom EntityQuery (with caching)."}),"\n",(0,t.jsx)(i.li,{children:"Consider using the hook_preprocess for the entity in question to add these programmatically rather than using something like blocks."}),"\n"]}),"\n",(0,t.jsx)(i.h6,{id:"views-example",children:"Views example"}),"\n",(0,t.jsx)(i.p,{children:"This shows a simple example of adding a created view to a page, after conditionally checking if it has results. Since views are already cached, there is no reason to add additional caching here. In this example,\nwe pass along the NID of the node as an additional var to the view, which is set up as a conditional filter in the view."}),"\n",(0,t.jsx)(i.p,{children:"This then makes the variable  MY_VARIABLE  available in the node--bundle-name.html.twig template, or similar, which is the rendered view."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"// From within hook_preprocess of choice\n$variables['MY_VARIABLE'] = _MY_MODULE_test_view_for_results($variables, 'VIEW_MACHINE_NAME', 'VIEW_DISPLAY_MACHINE_NAME', $nid);\n\n/**\n * Test views to see if they have results before displaying.\n * Function takes the variables array, the name of the view, the display machine name (ie. 'page_1' or 'block_1') and\n * any arguments to pass to the view (contextual filters/etc).\n */\nfunction _MY_MODULE_test_view_for_results($variables, $view, $tab, $var1 = null, $var2 = null) {\n  $test = views_get_view_result($view, $tab, $var1, $var2);\n  if(count($test) > 0) {\n    return views_embed_view($view, $tab, $var1, $var2);\n  }\n  return null;\n}\n\n// Then in twig template\n{% if MY_VARIABLE %}\n  {{ MY_VARIABLE }}\n{% endif %}\n"})}),"\n",(0,t.jsx)(i.h6,{id:"custom-cached-node-query",children:"Custom cached node query"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"// From within hook_preprocess of choice\n$variables['MY_VARIABLES'] = _MY_MODULE_get_things();\n\n// Function to get nodes of type CONTENT_TYPE and sort by title\nfunction _MY_MODULE_get_things() {\n  if ($cache = \\Drupal::cache()->get('MY_MODULE:get_things')) {\n    return $cache->data;\n  }\n  else {\n    $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');\n    $nids = $storage->getQuery();\n    $nids = $nids->condition('type', 'CONTENT_TYPE')\n      ->condition('status', 1)\n      ->sort('title')\n      ->execute();\n    $result = $storage->loadMultiple($nids);\n    if ($result) {\n      \\Drupal::cache()->set('MY_MODULE:get_things', $result, time() + 7200);\n      return $result;\n    }\n    else {\n      return NULL;\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h5,{id:"if-the-content-is-not-local",children:"If the content is NOT local"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"A custom call to an API/etc will be needed."}),"\n",(0,t.jsx)(i.li,{children:"Consider leveraging relevant composer based PHP libraries if possible"}),"\n",(0,t.jsx)(i.li,{children:"Consider caching all results."}),"\n"]}),"\n",(0,t.jsx)(i.h6,{id:"custom-api-call-example",children:"Custom API Call example"}),"\n",(0,t.jsx)(i.p,{children:"This example passes a unique ID for the feed, but you would also likely pass parameters from custom fields/etc, to be able to reuse calls to the endpoint from multiple places. To note, external API calls may better be accomplished by writing a service, but the example below also works."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-php",children:"// From within hook_preprocess of choice\n$variables['MY_VARIABLES'] = _MY_MODULE_get_stuff('UNIQUE_ID_FOR_THIS_CALL');\n\n// Function to test views to see if they have results before displaying\nfunction _MY_MODULE_get_stuff($id) {\n  if ($cache = \\Drupal::cache()->get('MY_MODULE:get_stuff--' . $id)) {\n    return $cache->data;\n  }\n  else {\n    $url = \"https://stuffendpoint/that/i/want\";\n    $result = file_get_contents($url);\n    $result = json_decode($result, TRUE);\n    $result = $result['data'];\n    if ($result) {\n      \\Drupal::cache()->set('MY_MODULE:get_stuff--' . $id, $result, time() + 7200);\n      return $result;\n    }\n    else {\n      return NULL;\n    }\n  }\n}\n\n// Then in twig template\n{% if MY_VARIABLES %}\n  {% for stuff in MY_VARIABLES %}\n    <h3>{{ stuff.title }}</h3>\n    {{ stuff.text }}\n  {% endfor %}\n{% endif %}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"pathauto",children:"Pathauto"}),"\n",(0,t.jsx)(i.p,{children:'When setting up aliases, it is sometimes required to check the "generate alias" box on existinng content. The easiest way to do so is via a DB update.'}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:" use Drupal\\pathauto\\PathautoState;\n\n /**\n * Update pathauto aliases for all Blog Posts.\n */\nfunction MY_MODULE_update_8001() {\n\n    $entity_type = 'node';\n    $entity_storage = \\Drupal::entityTypeManager()->getStorage($entity_type);\n    $nodes = $entity_storage->loadMultiple();\n\n    foreach($nodes as $node) {\n        if($node->bundle() == 'MY_BUNDLE') {\n            $node->path->pathauto = PathautoState::CREATE;\n            $node->save();\n        }\n    }\n\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"prepping-to-shiplaunch",children:"Prepping to ship/launch"}),"\n",(0,t.jsx)(i.p,{children:"Run through the entire idfive launch checklist for any site being launched by us. Additionally, consider the following:"}),"\n",(0,t.jsx)(i.h4,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsx)(i.p,{children:"Does your custom module rely on other custom or contrib modules?"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yml",children:"dependencies:\n  - paragraphs\n  - SOME_OTHER_CUSTOM_MODULE\n  - link_attributes\n"})}),"\n",(0,t.jsx)(i.h4,{id:"versioning",children:"Versioning"}),"\n",(0,t.jsx)(i.p,{children:"If committing custom modules/themes for eventual composer builds, versioning must be enacted on the repo that deploys to composer. When ready to deploy, create a tag in github up one version from previous, with the starting version being 8.1.0:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Minor versions (non breaking changes): 8.1.1, 8.1.2, etc."}),"\n",(0,t.jsx)(i.li,{children:"Major versions (breaking changes): 8.2.0, 8.3.0, etc."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"packagist",children:"Packagist"}),"\n",(0,t.jsx)(i.p,{children:"If this module/theme is to be controlled via composer/packagist:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Ensure a proper composer.json is created in the repo."}),"\n",(0,t.jsx)(i.li,{children:"Create a package for it on packagist.org"}),"\n",(0,t.jsx)(i.li,{children:"Be sure a client contact/it dept/etc has access to the packagist repo as well"}),"\n",(0,t.jsx)(i.li,{children:"Set webhook to deploy to packagist on push, wherever the repo is located."}),"\n",(0,t.jsx)(i.li,{children:'Note any required drupal modules in the "require" section so they also get added via composer.'}),"\n",(0,t.jsx)(i.li,{children:"Be sure to tag a version number when ready to deploy or update, see versioning notes, but for D8 we prefer 8.1.0, 8.1.1, etc."}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"example-composerjson",children:"Example composer.json"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\n  "name": "idfive/idfive_paragraphs",\n  "type": "drupal-module",\n  "description": "This module is designed to provide base idfive kitchen sink widgets.",\n  "keywords": ["Drupal"],\n  "homepage": "https://bitbucket.org/idfivellc/idfive-component-library-d8-paragraphs",\n  "license": "GPL-2.0+",\n  "authors": [\n    {\n      "name": "Dan Rogers",\n      "homepage": "https://www.drupal.org/u/dan_rogers",\n      "role": "Maintainer"\n    }\n  ],\n  "require": {\n    "drupal/external_data_source": "*",\n    "drupal/link_attributes": "*",\n    "drupal/paragraphs": "*",\n    "drupal/tablefield": "*",\n    "drupal/viewsreference": "*",\n    "drupal/webform": "*"\n  },\n  "support": {\n    "issues": "https://bitbucket.org/idfivellc/idfive-component-library-d8-paragraphs/issues",\n    "source": "https://bitbucket.org/idfivellc/idfive-component-library-d8-paragraphs"\n  }\n}\n'})}),"\n",(0,t.jsx)(i.h4,{id:"php-codesnifferdrupal-coder",children:"PHP CodeSniffer/Drupal Coder"}),"\n",(0,t.jsxs)(i.p,{children:["Before shipping custom themes and modules, run ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/node/1587138",children:"drupal coder"})," in order to fix formatting issues/etc, and to ensure we ship code that matches the drupal coding standard."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Install ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/node/1419988",children:"drupal coder"})," globally"]}),"\n",(0,t.jsxs)(i.li,{children:["See ",(0,t.jsx)(i.a,{href:"https://www.drupal.org/node/1587138",children:"coder example usage"})," for ideas on how to format/check custom code."]}),"\n",(0,t.jsxs)(i.li,{children:["Use phpcs: ",(0,t.jsx)(i.code,{children:"phpcs --standard=Drupal --extensions=php,module,inc,install,test,profile,theme,css,info,txt,md MY_CUSTOM_MODULE"})," to check"]}),"\n",(0,t.jsxs)(i.li,{children:["And then automated fixes via phpcbf: ",(0,t.jsx)(i.code,{children:"phpcbf --standard=Drupal --extensions=php,module,inc,install,test,profile,theme,css,info,txt,md MY_CUSTOM_MODULE"})]}),"\n",(0,t.jsx)(i.li,{children:"Be sure to double check code valitity/etc."}),"\n",(0,t.jsxs)(i.li,{children:["Use ",(0,t.jsx)(i.code,{children:"--ignore=static"})," to ignore front end code/etc in a themes static folder."]}),"\n",(0,t.jsxs)(i.li,{children:["See ",(0,t.jsx)(i.a,{href:"https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage",children:"Advanced Usage"})," for ignoring directories/etc."]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"drupal-check",children:"Drupal Check"}),"\n",(0,t.jsxs)(i.p,{children:["Install ",(0,t.jsx)(i.a,{href:"https://github.com/mglaman/drupal-check",children:"drupal-check"}),", which will give you the ability to run checks on custom modules/code, to ensure you are not using any depreciated D8 functions that will be removed in D9/etc."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Install globally via composer."}),"\n",(0,t.jsxs)(i.li,{children:["Ensure the path or an alias is .bash_profile, ie ",(0,t.jsx)(i.code,{children:'export PATH="$HOME/.composer/vendor/bin:$PATH"'})]}),"\n",(0,t.jsxs)(i.li,{children:["Then run via ",(0,t.jsx)(i.code,{children:"drupal-check PATH/TO/YOUR/CUSTOM/CODE"}),". To note, you may need to run this from outside a lando or other folders in order for the paths to not get wonky."]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"eslint",children:"ESLint"}),"\n",(0,t.jsx)(i.p,{children:"Generally speaking we do not usually care about using ESLint for most JS files, as we normally have these going into a theme based JS file, which has its own linters/builds/etc. If you do need to write vanilla D8 JS for a module though, this can be a very useful tool to help get JS files to drupal standards. ESLint is in core, you just need to install it in order to run it against specified files."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"cd core && yarn install"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"core/node_modules/.bin/eslint PATH_TO_YOUR_CUSTOM_JS.js"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"core/node_modules/.bin/eslint PATH_TO_YOUR_CUSTOM_JS.js --fix"})}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);
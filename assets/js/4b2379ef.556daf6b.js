"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[638],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>p});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),m=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},h=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),c=m(a),d=n,p=c["".concat(s,".").concat(d)]||c[d]||g[d]||l;return a?i.createElement(p,o(o({ref:t},h),{},{components:a})):i.createElement(p,o({ref:t},h))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[c]="string"==typeof e?e:n,o[1]=r;for(var m=2;m<l;m++)o[m]=a[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9145:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>r,toc:()=>m});var i=a(7462),n=(a(7294),a(3905));const l={},o="Git Usage",r={unversionedId:"general/git/standards",id:"general/git/standards",title:"Git Usage",description:"Set Up",source:"@site/docs/general/git/standards.md",sourceDirName:"general/git",slug:"/general/git/standards",permalink:"/docs/general/git/standards",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/general/git/standards.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Special Considerations for Pantheon",permalink:"/docs/general/git/pantheon"},next:{title:"Lando",permalink:"/docs/category/lando"}},s={},m=[{value:"Set Up",id:"set-up",level:2},{value:"Create a Repository at Github",id:"create-a-repository-at-github",level:3},{value:"Clone Repository Locally from the Command Line",id:"clone-repository-locally-from-the-command-line",level:3},{value:"Using Sourcetree",id:"using-sourcetree",level:3},{value:"Fetch/Pull",id:"fetchpull",level:2},{value:"From the Command Line",id:"from-the-command-line",level:3},{value:"Sourcetree",id:"sourcetree",level:3},{value:"Add/Commit",id:"addcommit",level:2},{value:"Add/Commit From The Command Line",id:"addcommit-from-the-command-line",level:3},{value:"Add/Commit from Sourcetree",id:"addcommit-from-sourcetree",level:3},{value:"Push",id:"push",level:2},{value:"Push from the Command Line",id:"push-from-the-command-line",level:3},{value:"Push from Sourcetree",id:"push-from-sourcetree",level:3},{value:"Branching",id:"branching",level:2},{value:"Branching from the Command Line",id:"branching-from-the-command-line",level:3},{value:"Branching from Sourcetree",id:"branching-from-sourcetree",level:3},{value:"Merge Conflicts",id:"merge-conflicts",level:3},{value:"Tagging",id:"tagging",level:2},{value:"Tagging from the Command Line",id:"tagging-from-the-command-line",level:3},{value:"Tagging Using Sourcetree",id:"tagging-using-sourcetree",level:3},{value:"Gitflow",id:"gitflow",level:2},{value:"Set Up",id:"set-up-1",level:3},{value:"Set Up from the Command Line",id:"set-up-from-the-command-line",level:4},{value:"Set Up from Sourcetree",id:"set-up-from-sourcetree",level:4},{value:"Using Gitflow",id:"using-gitflow",level:3},{value:"Using Gitflow from the Command Line",id:"using-gitflow-from-the-command-line",level:4},{value:"Using Gitflow from Sourcetree",id:"using-gitflow-from-sourcetree",level:4},{value:"Commit Messaging",id:"commit-messaging",level:2},{value:"When to Commit",id:"when-to-commit",level:3},{value:"What Should be in a Commit Message",id:"what-should-be-in-a-commit-message",level:3},{value:"Reviewing Commit Histories",id:"reviewing-commit-histories",level:2},{value:"Getting History for an Individual File",id:"getting-history-for-an-individual-file",level:3},{value:"History from Command Line",id:"history-from-command-line",level:4},{value:"History from Sourcetree",id:"history-from-sourcetree",level:4},{value:"History from VSCode",id:"history-from-vscode",level:4}],h={toc:m},c="wrapper";function g(e){let{components:t,...l}=e;return(0,n.kt)(c,(0,i.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"git-usage"},"Git Usage"),(0,n.kt)("h2",{id:"set-up"},"Set Up"),(0,n.kt)("h3",{id:"create-a-repository-at-github"},"Create a Repository at Github"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/new"},"https://github.com/new")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9251).Z,title:"Create a new repository",width:"1470",height:"638"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Screen for creating a new repository on Github.")),(0,n.kt)("h3",{id:"clone-repository-locally-from-the-command-line"},"Clone Repository Locally from the Command Line"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/michaelscraven1972/learning learning1\n")),(0,n.kt)("p",null,"This creates a directory called learning1 in the current directory."),(0,n.kt)("h3",{id:"using-sourcetree"},"Using Sourcetree"),(0,n.kt)("p",null,"New > Clone from URL  - enter URL and local directory location."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9894).Z,title:"image_tooltip",width:"1999",height:"501"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The dropdown gives a number of options, including to open existing local or remote repositories, or create new ones.")),(0,n.kt)("p",null,"\u201cClone from URL\u201d brings up a dialog where you can enter the URL of the repository."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9942).Z,title:"image_tooltip",width:"1999",height:"630"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Sourcetree will give default names and paths once it validates the repository")),(0,n.kt)("h2",{id:"fetchpull"},"Fetch/Pull"),(0,n.kt)("p",null,"If working collaboratively with other developers, the local repository will get behind. Git fetch gets the latest meta data from the remote repository so that the developer can see what  changes have been made. Git pull, however pulls those changes and tries to integrate them with the local repository."),(0,n.kt)("h3",{id:"from-the-command-line"},"From the Command Line"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git fetch\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(4318).Z,title:"image_tooltip",width:"1142",height:"374"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Git fetch outputs the changes that have been made on the remote")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git pull\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(4893).Z,title:"image_tooltip",width:"1606",height:"342"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"On pull, the files are updated")),(0,n.kt)("h3",{id:"sourcetree"},"Sourcetree"),(0,n.kt)("p",null,"If the local repository is behind, Sourcetree will show that a pull needs to be done."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(5220).Z,title:"image_tooltip",width:"1010",height:"322"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The pull button shows that there are two commits to pull. The graph also shows that this repository is two behind.")),(0,n.kt)("p",null,"When the user clicks the pull button, a dialog box comes up:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(1122).Z,title:"image_tooltip",width:"1336",height:"680"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The dialog box allows selection of which branch and repository to pull from.")),(0,n.kt)("h2",{id:"addcommit"},"Add/Commit"),(0,n.kt)("h3",{id:"addcommit-from-the-command-line"},"Add/Commit From The Command Line"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git status\n")),(0,n.kt)("p",null,"Show  tracked and untracked files and changes yet to be committed."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(2243).Z,title:"image_tooltip",width:"1112",height:"232"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The status command shows that the file first.txt has been edited. Stage the file with add.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git add FILENAME\n")),(0,n.kt)("p",null,"or, add all staged files:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git add .\n")),(0,n.kt)("p",null,"Stage file and start tracking the file. Added files can then be committed."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git commit -m MESSAGE`\n")),(0,n.kt)("p",null,"Will commit the added files with a message."),(0,n.kt)("h3",{id:"addcommit-from-sourcetree"},"Add/Commit from Sourcetree"),(0,n.kt)("p",null,"As files are changed in the local repository, Sourcetree records that files have changes that need to be staged and committed."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(6651).Z,title:"image_tooltip",width:"1116",height:"432"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Both the graph and the commit button show that a file has changed and needs to be committed.")),(0,n.kt)("p",null,"After clicking on commit, the changed files display on the left panel for review before being staged. Once, staged, the files still need to be committed."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(1626).Z,title:"image_tooltip",width:"1778",height:"904"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The staged and highlighted file in the left shows the changes in the right panel. Commit is not complete, though until a commit message and commit button clicked. Also, you can see we are on the master branch.")),(0,n.kt)("p",null,"More information about any commit can be found by clicking anywhere along the graph. This includes the author of the commit, the commit hash, and the commit message."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(8559).Z,title:"image_tooltip",width:"918",height:"532"})),(0,n.kt)("h2",{id:"push"},"Push"),(0,n.kt)("h3",{id:"push-from-the-command-line"},"Push from the Command Line"),(0,n.kt)("p",null,"The push command pushes changes to a branch to the remote repository."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git push REMOTE BRANCH\n")),(0,n.kt)("h3",{id:"push-from-sourcetree"},"Push from Sourcetree"),(0,n.kt)("p",null,"After files are committed, the push button will show a number like the commit button did. Pushing the button will generate a dialog box that asks which repository and which branch."),(0,n.kt)("p",null,"Unlike on the git command line, on push Sourcetree by default pushed tags:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(1766).Z,title:"image_tooltip",width:"1370",height:"650"})),(0,n.kt)("h2",{id:"branching"},"Branching"),(0,n.kt)("h3",{id:"branching-from-the-command-line"},"Branching from the Command Line"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git branch\n")),(0,n.kt)("p",null,"Shows the branches available and which branch I am on."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(7036).Z,title:"image_tooltip",width:"812",height:"176"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Output from git branch, highlighting the branch the repository is on")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout -b first_branch\n")),(0,n.kt)("p",null,"Creates and then checks out a new branch."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout master\n")),(0,n.kt)("p",null,"Brings me back to master."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git add .\n")),(0,n.kt)("p",null,"Added files for commit."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'git config credential.username "michaelscraven1972"\n')),(0,n.kt)("p",null,"Change user for this repo."),(0,n.kt)("h3",{id:"branching-from-sourcetree"},"Branching from Sourcetree"),(0,n.kt)("p",null,"A new branch can be created by right clicking on the branch button on the left navigation."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9551).Z,title:"image_tooltip",width:"820",height:"612"})),(0,n.kt)("p",null,"Selecting \u201cNew Branch\u201d brings up a dialog box:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(7857).Z,title:"image_tooltip",width:"1164",height:"852"})),(0,n.kt)("p",null,"The dialog lets the user select whether to switch to the new branch and a specific commit to branch from."),(0,n.kt)("p",null,"Clicking on the new branch, the graph shows that the new branch is forking off main."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(5851).Z,title:"image_tooltip",width:"1999",height:"615"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"New branch appears on Fetch in Sourcetree")),(0,n.kt)("p",null,"Sourcetree only shows local branches on the left, not remote. The top of the tree mode and the Remotes section on the left allows for show or hide remote branches."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(3874).Z,title:"image_tooltip",width:"502",height:"400"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The remotes area.")),(0,n.kt)("p",null,"To create a local branch of the remote, right click on the remote branch and then checkout or double click the remote branch."),(0,n.kt)("p",null,"This brings up:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9389).Z,title:"image_tooltip",width:"1234",height:"634"})),(0,n.kt)("h3",{id:"merge-conflicts"},"Merge Conflicts"),(0,n.kt)("p",null,"File has been altered while it is being worked on locally. Pull the change locally, merge conflict. On the command line, will say (Merging) at prompt until changes are committed."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(4188).Z,title:"image_tooltip",width:"1918",height:"858"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"In VS Code, links  for accept current (change that is going in from local), accept incoming, and accept both.")),(0,n.kt)("p",null,"Often merge conflicts are more complicated than the screen capture above. Merge conflicts indicate that git cannot easily merge files and files will need to be manually reviewed, edited  and committed."),(0,n.kt)("h2",{id:"tagging"},"Tagging"),(0,n.kt)("p",null,"Tags are tied to commits. They allow a name to be given to a point in the repository. They are not by default pushed with a push from the command line."),(0,n.kt)("p",null,"Examples of how we use tags at idfive:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A new tag pushed to a github repository that has been submitted to packagist kicks off a new release."),(0,n.kt)("li",{parentName:"ul"},"A new tag is created to deploy to places like Aqcuia, in certain workflows.")),(0,n.kt)("h3",{id:"tagging-from-the-command-line"},"Tagging from the Command Line"),(0,n.kt)("p",null,"To push tags along with the branch, add --tags flag. Like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git push origin master --tags\n")),(0,n.kt)("p",null,"Create a tag on the command line:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'git tag -a <tag_name> -m "Tag message"\n')),(0,n.kt)("p",null,"You can see all tags with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git tag\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(1262).Z,title:"image_tooltip",width:"850",height:"352"})),(0,n.kt)("p",null,"And you can see what commit a tag is connected to by typing:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git show TAG_NAME\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(531).Z,title:"image_tooltip",width:"1234",height:"414"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The tag 8.1.14 is connected to the commit beginning 1fa861e292")),(0,n.kt)("p",null,"Old commits can be tagged after the fact with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git tag -a TAG_NAME commit\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9775).Z,title:"image_tooltip",width:"1618",height:"684"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"With the -m flag adding the message \u201cRelease 2.1\u201d a past commit is tagged")),(0,n.kt)("p",null,"Individual tags can also be checked out, but that puts you in a detached head state:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout TAG_NAME\n")),(0,n.kt)("h3",{id:"tagging-using-sourcetree"},"Tagging Using Sourcetree"),(0,n.kt)("p",null,"In SourceTree, create a new tag by right clicking on \u201cTags\u201d on the left. You can also see all tags by clicking on \u201cShow\u201d next to the tags button."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9346).Z,title:"image_tooltip",width:"474",height:"542"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Adding a tag and the list of tags in the left panel.")),(0,n.kt)("h2",{id:"gitflow"},"Gitflow"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"},"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow")),(0,n.kt)("p",null,"idfive uses the gitflow methodology for development. Gitflow defines a set of branches and specific purposes for each kind of branch. In addition to  the master branch, gitflow uses a develop branch, feature branches, release branches, and hotfix branches."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"develop"),": which is the starting branch for all ",(0,n.kt)("strong",{parentName:"li"},"feature")," branches. Develop can be very dynamic, with new feature code being merged in all the time."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"feature"),": feature branches are created to work on new functionality.They are merged back to develop when complete."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"master"),": is very stable, is always production ready. No feature branches are made from master."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"release"),": a branch created from ",(0,n.kt)("strong",{parentName:"li"},"develop")," when a new set of features is ready to be merged into master"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"hotfixes"),": created from master to repair bugs found in the production code after a release.")),(0,n.kt)("h3",{id:"set-up-1"},"Set Up"),(0,n.kt)("h4",{id:"set-up-from-the-command-line"},"Set Up from the Command Line"),(0,n.kt)("p",null,"Install gitflow on the command line with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"brew install git-flow\n")),(0,n.kt)("p",null,"After installation, to begin gitflow for a project from the command line:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git flow init\n")),(0,n.kt)("p",null,"Git flow will ask questions for setting up the branches."),(0,n.kt)("h4",{id:"set-up-from-sourcetree"},"Set Up from Sourcetree"),(0,n.kt)("p",null,"Sourcetree has a button for setting up gitflow:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(780).Z,title:"image_tooltip",width:"208",height:"172"})),(0,n.kt)("p",null,"The default set up in Sourcetree will set up the different branch types in their own directories:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9764).Z,title:"image_tooltip",width:"942",height:"810"})),(0,n.kt)("p",null,"As stated here: ",(0,n.kt)("a",{parentName:"p",href:"https://developers.idfive.com/#/general/git/standards"},"https://developers.idfive.com/#/general/git/standards"),", this setup will not work with Pantheon multidev. Thus, usually this is changed to prefixes, \u201cf-\u201d, \u201cr-\u201d, and \u201ch-\u201d. In Sourcetree, the config file will have to be edited to reflect the changes made in the GUI. After this, branch names will have the prefix and will not need to be added. As the ",(0,n.kt)("a",{parentName:"p",href:"https://developers.idfive.com/#/general/git/standards"},"developer documents")," note, changing these prefixes sometimes does not actually work (bug in Sourcetree potentially), and that the config file for Sourcetree needs to be edited:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9767).Z,title:"image_tooltip",width:"926",height:"762"}),"\n",(0,n.kt)("em",{parentName:"p"},"Changing prefixes.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(2015).Z,title:"image_tooltip",width:"1184",height:"1122"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The edt config file button is on the advanced tab for the settings.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(5470).Z,title:"image_tooltip",width:"1310",height:"966"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The edit config file")),(0,n.kt)("h3",{id:"using-gitflow"},"Using Gitflow"),(0,n.kt)("h4",{id:"using-gitflow-from-the-command-line"},"Using Gitflow from the Command Line"),(0,n.kt)("p",null,"With git flow installed, a new feature branch is created with the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git flow feature start BRANCH_NAME\n")),(0,n.kt)("p",null,"When the feature is complete, the feature branch is merged with develop and the feature branch deleted. The command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git flow feature finish BRANCH_NAME\n")),(0,n.kt)("p",null,"Merges the features branch into develop and deletes the feature branch."),(0,n.kt)("p",null,"Likewise, hotfix and release branches can be created. Both hot fix and release branches are normally merged back into both master and develop when they are finished."),(0,n.kt)("h4",{id:"using-gitflow-from-sourcetree"},"Using Gitflow from Sourcetree"),(0,n.kt)("p",null,"Once Gitflow is set up, clicking on the Gitflow button again gives the option to set up a feature. Give the feature branch a name. The repo will switch to the new branch."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(2222).Z,title:"image_tooltip",width:"464",height:"490"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The Gitflow dialog for starting a new branch")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(4850).Z,title:"image_tooltip",width:"1000",height:"596"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Name the feature on the next dialog")),(0,n.kt)("p",null,"Once complete with the feature, highlighting the branch and then clicking Gitflow provides the option to finish the feature:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(5113).Z,title:"image_tooltip",width:"674",height:"546"})),(0,n.kt)("p",null,"Clicking on Finish Current gives the option to save or delete the feature branch as the feature is merged into develop."),(0,n.kt)("h2",{id:"commit-messaging"},"Commit Messaging"),(0,n.kt)("h3",{id:"when-to-commit"},"When to Commit"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://jasonmccreary.me/articles/when-to-make-git-commit/"},"Jason McCreary")," outlines a simple set of two rules for when to commit."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Commit when there is a complete unit of work"),(0,n.kt)("li",{parentName:"ul"},"Commit anything that you may want to roll back")),(0,n.kt)("p",null,"The second rule is sort of a special case. The first is interpretive."),(0,n.kt)("p",null,"What is not a good idea, is committing based on anything as arbitrary as time. Rather all changes in one commit should be related to one relatively small unit of work. Being mindful of the second rule and the fact that often commits need to be rolled back, it is good to lean on committing frequently."),(0,n.kt)("h3",{id:"what-should-be-in-a-commit-message"},"What Should be in a Commit Message"),(0,n.kt)("p",null,"Commit messages and how they should be formatted connect with commits themselves in that commits messages, so they can be easily understood, should be short and direct. Conversely, commits, so they can be easily rolled back and reviewed, should be of a small, single unit of related changes, which helps in writing succinct commit messages. So, if it takes too long to meaningfully outline the changes in a commit, it should probably be broken up."),(0,n.kt)("p",null,"Some general commit message tips (credit to Tim Pope for inspiration):"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Capitalized, short (50 chars or less) summary"),(0,n.kt)("li",{parentName:"ul"},"More detailed explanatory text, if necessary.  Wrap it to about 72characters or so.  In some contexts, the first line is treated as the subject of an email and the rest of the text as the body.  The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together."),(0,n.kt)("li",{parentName:"ul"},"If bugify/trello ticket for this exists, add a reference(s) to them at the bottom,like so: Resolves: #123")),(0,n.kt)("h2",{id:"reviewing-commit-histories"},"Reviewing Commit Histories"),(0,n.kt)("p",null,"The basic command for reviewing recent commits is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git log\n")),(0,n.kt)("p",null,"Adding the --graph flag gives a visual representation of the commit history:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(2282).Z,title:"image_tooltip",width:"1212",height:"854"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Git log with the graph flag"),"."),(0,n.kt)("p",null,"The graph represented above shows where the first_brach flag (in red) forks off of the master branch and is then merged later at commit 48eff2fed88f."),(0,n.kt)("p",null,"The same information is displayed in Sourcetree like this:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(1379).Z,title:"image_tooltip",width:"892",height:"456"})),(0,n.kt)("h3",{id:"getting-history-for-an-individual-file"},"Getting History for an Individual File"),(0,n.kt)("h4",{id:"history-from-command-line"},"History from Command Line"),(0,n.kt)("p",null,"The git log command also allows displaying the information for a single file. Without any flags, git log shows an abbreviated output like the git log command, only showing commits that affect the named file."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(5765).Z,title:"image_tooltip",width:"1999",height:"809"})),(0,n.kt)("p",null,"However, with the -p flag a full display including all changes outputs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"git log -p FILE_NAME\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(3512).Z,title:"image_tooltip",width:"1999",height:"872"})),(0,n.kt)("h4",{id:"history-from-sourcetree"},"History from Sourcetree"),(0,n.kt)("p",null,"In Sourcetree, get the commit history for an individual file by clicking on a commit, right clicking on one of the files and going to log selected."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(645).Z,title:"image_tooltip",width:"862",height:"838"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Here, right clicking on a file from a highlighted commit shows the Log Selected \u2026 option")),(0,n.kt)("p",null,"From there, it is possible to each commit where the file changed and what changes were made:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(3114).Z,title:"image_tooltip",width:"1846",height:"1178"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The right panel shows how the file changed in this commit")),(0,n.kt)("h4",{id:"history-from-vscode"},"History from VSCode"),(0,n.kt)("p",null,"The new (as of version 1.44) Timeline feature in VSCode allows you to review file histories as well. Simply highlight a file and open the Timeline panel on the left."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(5190).Z,title:"image_tooltip",width:"1999",height:"712"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"VSCode with timeline open and commit highlighted (light high contrast color theme)")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(4174).Z,title:"image_tooltip",width:"1106",height:"528"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Close up of the timeline in the left panel")),(0,n.kt)("p",null,"Changes to the file are in the right panel."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"alt_text",src:a(9159).Z,title:"image_tooltip",width:"1852",height:"376"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Changes  made to the file in the commit. Green highlighting indicates new lines.")))}g.isMDXComponent=!0},9251:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/creat_new_repo-32b26b3cc6e54baddd4bb0a8b0690483.png"},9775:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image1-126644be57eba345cd6a2e52688d6265.png"},1626:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image10-d473e26fb7a8017163b8079540810df0.png"},7036:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image11-9f1e0e50d2a3d8862d6d8dfcad25a3f7.png"},1262:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image12-fc79cd02e6217dfe02e22fec77061795.png"},1766:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image13-beaae9b7c1d938937a0fea581997a814.png"},6651:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image14-8d2704344a8c0a6ac2eba674b4aacc92.png"},8559:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image15-13c45fd8ded2e907ff11ae80e55469d2.png"},4188:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image16-14f9904331257df71b7816d87e5000bf.png"},9894:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image17-ae709f6e99a67272cf0d1d9a6edbd70c.png"},4318:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image18-f04ddde88af9115a964344cb0d9987d9.png"},2243:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image19-9087692703499de506c8336a53aa594b.png"},7857:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image2-448d5db19cc3ff5f21ac45fe43758c5a.png"},3874:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image20-cca2b9f9520937b27277ff37b5656530.png"},9389:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image21-7cb2863e9e180d3cee99761cdcd833d2.png"},531:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image22-a71af21d0290bf20e885095fe2634073.png"},4850:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image24-8c32ea7fd6aac0f5e13c8e6c20b1bb85.png"},780:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image25-0238e4ec14c497438787b9ab8c6960f1.png"},2222:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image26-18ce8af3459af998dc81a655ab30fe19.png"},9764:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image27-667017a70a454f7b3990f5b964cc63a1.png"},2015:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image28-45a6932e2c83a2711f8c33904f7b950f.png"},9767:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image29-8907d454bb40498ba1d0d38d0af4540b.png"},9942:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image3-763425694d53a9a01b4e333c73676584.png"},5113:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image30-18499d449602f99bd3fcbf508e65d56f.png"},5470:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image31-022ca29c43826fbca03032902e9fb478.png"},5765:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image32-124b236ab5bd28b78bea80fa067764e1.png"},645:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image33-57275164313348e3c9129ac0188ada40.png"},9159:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image34-2f79c8a22cbaa3bb9d7f07e3fdfe9399.png"},1379:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image35-b85516d033abe3c2f0eb4fdc9b1a0a4e.png"},3512:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image36-4714f565c73f9c9e0b0807af410c7b6f.png"},4174:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image37-2edcd21b33edbdc745d0923fc0861dc1.png"},5190:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image38-344acff9f1c946cf36bf99c6e6ee6d66.png"},2282:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image39-b96c17e135929588a8dad82213d0f5a3.png"},9551:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image4-1906b7acf15bf277938fe4d046c07b98.png"},3114:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image40-2124e86cdbef8f471cb606e8eb469bff.png"},5851:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image5-55fb6c84ba385d8cc9ff42dc3e2aaeea.png"},5220:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image6-7cb392736745adde95dcca5b18f854fe.png"},1122:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image7-8c5037ad1b52ade3ce4e80aa3d6ed043.png"},4893:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image8-acb33e3a42524c4d31fc5dfe0d83b860.png"},9346:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/image9-2412ddbec0494ea2d920db9abf8d6701.png"}}]);
"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[6284],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>h});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return t?n.createElement(h,s(s({ref:r},p),{},{components:t})):n.createElement(h,s({ref:r},p))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var c in r)hasOwnProperty.call(r,c)&&(o[c]=r[c]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9397:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const i={},s="Simplesamlphp (per page) password protection in drupal",o={unversionedId:"back-end/drupal/drupal-simplesamlphp-password-protection",id:"back-end/drupal/drupal-simplesamlphp-password-protection",title:"Simplesamlphp (per page) password protection in drupal",description:"Requires saml auth in order to view a page. This assumes you are already using simplesamlphp for authentication, via the drupal module. Similar approaches could be used for different SSO solutions. The main idea is to add a boolean field to a single content type, to require login in order to view the content or not.",source:"@site/docs/back-end/drupal/drupal-simplesamlphp-password-protection.md",sourceDirName:"back-end/drupal",slug:"/back-end/drupal/drupal-simplesamlphp-password-protection",permalink:"/docs/back-end/drupal/drupal-simplesamlphp-password-protection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/back-end/drupal/drupal-simplesamlphp-password-protection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Simple (per page) password protection in drupal",permalink:"/docs/back-end/drupal/drupal-simple-password-protection"},next:{title:"Drupal 8 Site Building",permalink:"/docs/back-end/drupal/drupal-sitebuilding"}},c={},l=[{value:"To enact",id:"to-enact",level:2},{value:"Create the service",id:"create-the-service",level:3},{value:"MY_MODULE.services.yml",id:"my_moduleservicesyml",level:4},{value:"src/Services/MyService.php",id:"srcservicesmyservicephp",level:4},{value:"Create the event subscriber",id:"create-the-event-subscriber",level:3},{value:"src/EventSubscriber/MyServiceSubscriber.php",id:"srceventsubscribermyservicesubscriberphp",level:4}],p={toc:l},u="wrapper";function d(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"simplesamlphp-per-page-password-protection-in-drupal"},"Simplesamlphp (per page) password protection in drupal"),(0,a.kt)("p",null,"Requires saml auth in order to view a page. This assumes you are already using simplesamlphp for authentication, via the drupal module. Similar approaches could be used for different SSO solutions. The main idea is to add a boolean field to a single content type, to require login in order to view the content or not."),(0,a.kt)("h2",{id:"to-enact"},"To enact"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create the boolean field on bundle of choice."),(0,a.kt)("li",{parentName:"ul"},"Create the service, which will run the authentication."),(0,a.kt)("li",{parentName:"ul"},"Create the event subscriber, which will decide if a page should be authenticated.")),(0,a.kt)("h3",{id:"create-the-service"},"Create the service"),(0,a.kt)("h4",{id:"my_moduleservicesyml"},"MY_MODULE.services.yml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"services:\n  MY_SERVICE.auth:\n    class: Drupal\\MY_MODULE\\Services\\MyService\n  MY_SERVICE.auth_event_subscriber:\n    class: Drupal\\howard_content_types\\EventSubscriber\\HowardAuthSubscriber\n    tags:\n      - {name: event_subscriber}\n")),(0,a.kt)("h4",{id:"srcservicesmyservicephp"},"src/Services/MyService.php"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Drupal\\MY_MODULE\\Services;\n\n// May or may not need this, depending on setup.\nrequire_once('../simplesamlphp/lib/_autoload.php');\n\nuse SimpleSAML\\Auth\\Simple;\n\n/**\n * Class MyService.\n */\nclass MyService {\n\n\n  /**\n   * Constructs a new MyService object.\n   */\n  public function __construct() {\n\n  }\n\n  /**\n   * Public method to test if users are authenticated via SAML, and return username.\n   */\n  public function limitToSamlUsers() {\n      $as = new Simple('default-sp');\n      $as->requireAuth();\n      $attributes = $as->getAttributes();\n  }\n\n}\n\n")),(0,a.kt)("h3",{id:"create-the-event-subscriber"},"Create the event subscriber"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This creates an event subscriber that runs when the symphony kernel is requested."),(0,a.kt)("li",{parentName:"ul"},'Conceivably, this should effectively "preprocess" the page, and be able to check for our fields/etc before the cache is hit.')),(0,a.kt)("h4",{id:"srceventsubscribermyservicesubscriberphp"},"src/EventSubscriber/MyServiceSubscriber.php"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Drupal\\MY_MODULE\\EventSubscriber;\n\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Drupal\\node\\NodeInterface;\n\n/**\n * Class MyServiceSubscriber.\n *\n * @package Drupal\\MY_MODULE.\n */\nclass MyServiceSubscriber implements EventSubscriberInterface {\n\n  /**\n   * {@inheritdoc}\n   */\n  public static function getSubscribedEvents() {\n    $events[KernelEvents::REQUEST][] = ['disableCacheForProtectedPage'];\n    return $events;\n  }\n\n  /**\n   * Subscriber Callback for the event.\n   */\n  public function disableCacheForProtectedPage() {\n\n    // Check if current node type is one we want to exclude from the cache.\n    $node = \\Drupal::routeMatch()->getParameter('node');\n    if ($node instanceof NodeInterface) {\n      $node_type = $node->getType();\n    }\n\n    if (isset($node_type) && $node_type == 'MY_BUNDLE') {\n      if ($node->hasField('MY_BOOLEAN_FIELD')) {\n        $value = $node->get('MY_BOOLEAN_FIELD')->getValue();\n        if (isset($value[0]) && $value[0]['value'] == '1') {\n          // Flip the cache kill switch.\n          \\Drupal::service('page_cache_kill_switch')->trigger();\n          if (\\Drupal::currentUser()->isAnonymous()) {\n            // Ignore auth requirement if you are a logged in drupal user.\n            \\Drupal::service('MY_SERVICE.auth')->limitToHowardUsers();\n          }\n        }\n      }\n    }\n  }\n\n}\n")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[6694],{553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"back-end/drupal/drupal-rest-custom","title":"Custom REST endpoints","description":"While stock REST endpoints in drupal can (and should) be used in most scenarios, sometimes we need to get tricky.","source":"@site/docs/back-end/drupal/drupal-rest-custom.md","sourceDirName":"back-end/drupal","slug":"/back-end/drupal/drupal-rest-custom","permalink":"/docs/back-end/drupal/drupal-rest-custom","draft":false,"unlisted":false,"editUrl":"https://github.com/idfive/Developer-Documentation/tree/main/docs/back-end/drupal/drupal-rest-custom.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Drupal Performance","permalink":"/docs/back-end/drupal/drupal-performance"},"next":{"title":"Schema.org Implementation in Drupal","permalink":"/docs/back-end/drupal/drupal-schema-org"}}');var i=t(4848),r=t(8453);const o={},a="Custom REST endpoints",l={},c=[{value:"Basic Overview",id:"basic-overview",level:2},{value:"Create custom Plugin",id:"create-custom-plugin",level:2},{value:"Simple example",id:"simple-example",level:3},{value:"Complex example",id:"complex-example",level:3},{value:"Enable endpoint and add permissions to access",id:"enable-endpoint-and-add-permissions-to-access",level:2},{value:"Adjust CORS",id:"adjust-cors",level:2},{value:"Caching Notes",id:"caching-notes",level:2},{value:"WYSIWYG Notes",id:"wysiwyg-notes",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-rest-endpoints",children:"Custom REST endpoints"})}),"\n",(0,i.jsx)(n.p,{children:"While stock REST endpoints in drupal can (and should) be used in most scenarios, sometimes we need to get tricky."}),"\n",(0,i.jsx)(n.p,{children:"Some common scenarios that may warrant a custom endpoint:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The need to match existing JSON, or for a custom json structure."}),"\n",(0,i.jsx)(n.li,{children:"The need for complex logic in the query."}),"\n",(0,i.jsx)(n.li,{children:"The need for a simplified return."}),"\n",(0,i.jsx)(n.li,{children:"The need to combine queries into a single return."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-overview",children:"Basic Overview"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create custom Plugin."}),"\n",(0,i.jsx)(n.li,{children:"Enable endpoint and add permissions to access."}),"\n",(0,i.jsx)(n.li,{children:"Adjust CORS, if needed."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"create-custom-plugin",children:"Create custom Plugin"}),"\n",(0,i.jsx)(n.p,{children:"A simple endpoint that returns static content. Can be modified with queries/etc as needed."}),"\n",(0,i.jsx)(n.h3,{id:"simple-example",children:"Simple example"}),"\n",(0,i.jsx)(n.p,{children:"MY_MODULE/src/Plugin/rest/resource/MyCustomEndpoint.php"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'<?php\n\nnamespace Drupal\\MY_MODULE\\Plugin\\rest\\resource;\n\nuse Drupal\\rest\\Plugin\\ResourceBase;\nuse Drupal\\rest\\ResourceResponse;\n\n/**\n * Provides a resource to get view modes by entity and bundle.\n *\n * @RestResource(\n *   id = "my_custom_endpoint",\n *   label = @Translation("My Custom REST Endpoint"),\n *   uri_paths = {\n *     "canonical" = "/api/my_module/my_custom_endpoint"\n *   }\n * )\n */\nclass MyCustomEndpoint extends ResourceBase {\n\n  /**\n   * Responds to GET requests.\n   *\n   * @return \\Drupal\\rest\\ResourceResponse\n   *   The HTTP response object.\n   *\n   * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n   *   Throws exception expected.\n   */\n  public function get() {\n    // Logic here to do whatever you wish, usually an entity query/etc.\n    $static = \'Congrats on your new REST endpoint!\';\n    return new ResourceResponse($static);\n  }\n\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"complex-example",children:"Complex example"}),"\n",(0,i.jsx)(n.p,{children:"A more complex example that shows arguments, and returns a combined list of two separate queries."}),"\n",(0,i.jsx)(n.p,{children:"In this example we will:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use a custom Service for the logic of getting content, as is a better practice."}),"\n",(0,i.jsx)(n.li,{children:"Pass an argument to the REST endpoint, in this case a TID."}),"\n",(0,i.jsx)(n.li,{children:"Construct a global variable."}),"\n",(0,i.jsx)(n.li,{children:"Get a list of content of type CONTENT_TYPE_ONE tagged with that TID."}),"\n",(0,i.jsx)(n.li,{children:"Get a list of content of type CONTENT_TYPE_TWO tagged with that TID."}),"\n",(0,i.jsx)(n.li,{children:"Format the response to a few simple fields."}),"\n",(0,i.jsx)(n.li,{children:"Return a single response with both lists."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"MY_MODULE/src/Plugin/rest/resource/MyCustomEndpoint.php"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace Drupal\\MY_MODULE\\Plugin\\rest\\resource;\n\nuse Drupal\\rest\\Plugin\\ResourceBase;\nuse Drupal\\rest\\ResourceResponse;\nuse Psr\\Log\\LoggerInterface;\nuse Drupal\\MY_MODULE\\Services\\MyGeneralService;\n\n/**\n * Provides a resource to get view modes by entity and bundle.\n *\n * @RestResource(\n *   id = \"my_custom_endpoint\",\n *   label = @Translation(\"My Custom REST Endpoint\"),\n *   uri_paths = {\n *     \"canonical\" = \"/api/my_module/my_custom_endpoint/{custom_arg}\"\n *   }\n * )\n */\nclass MyCustomEndpoint extends ResourceBase {\n\n  public $content_types;\n\n  /**\n   * Constructs a new content types object.\n   */\n  public function __construct(array $configuration, $plugin_id, $plugin_definition, array $serializer_formats, LoggerInterface $logger) {\n    parent::__construct($configuration, $plugin_id, $plugin_definition, $serializer_formats, $logger);\n    $this->content_types = [\n     [\n       'machine_name' => 'CONTENT_TYPE_ONE',\n     ],\n     [\n       'machine_name' => 'CONTENT_TYPE_TWO',\n     ],\n    ];\n  }\n\n  /**\n   * Responds to GET requests.\n   *\n   * @return \\Drupal\\rest\\ResourceResponse\n   *   The HTTP response object.\n   *\n   * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n   *   Throws exception expected.\n   */\n  public function get($custom_arg = NULL) {\n    if ($custom_arg) {\n      $response = [];\n      foreach ($this->content_types as $key => $content_type) {\n        $response[$content_type['machine_name']] = MyGeneralService::getStuff($custom_arg, $content_type['machine_name']);\n      }\n      return new ResourceResponse($response);\n    }\n  }\n\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"MY_MODULE/src/Services/MyGeneralService.php"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace Drupal\\MY_MODULE\\Services;\n\nuse Drupal\\node\\Entity\\Node;\nuse Drupal\\Component\\Utility\\Unicode;\n\n/**\n * Class MyGeneralService.\n */\nclass MyGeneralService {\n\n  /**\n   * Public method to get stuff.\n   */\n  public function getStuff($tid = NULL, $type = NULL) {\n    if ($tid) {\n      $nids = \\Drupal::entityQuery('node')->condition('type', $type)\n        ->condition('status', 1)\n        ->condition('FIELD_MY_COMMON_TAXONOMY_FIELD', $tid)\n        ->range(0, 6)\n        ->accessCheck(FALSE)\n        ->execute();\n      if ($nids) {\n        $nodes = Node::loadMultiple($nids);\n        $articles = self::formatStuffForRest($nodes);\n      }\n    }\n    return $articles;\n  }\n\n  /**\n   * Format nodes for rest return.\n   * @return Array articles\n   */\n  public static function formatStuffForRest($results) {\n    $articles = [];\n    foreach ($results as $result) {\n      $article = [];\n      $nid = $result->id();\n      $article['title'] = $result->getTitle();\n      $description = $result->field_summary->value;\n      $article['description'] = Unicode::truncate($description, 200, TRUE, TRUE, 5);\n      $article['url'] = \\Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);\n      $articles[] = $article;\n    }\n    return $articles;\n  }\n\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"enable-endpoint-and-add-permissions-to-access",children:"Enable endpoint and add permissions to access"}),"\n",(0,i.jsx)(n.p,{children:"While this can also be done manually by writing config files, we will focus on the easy way."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Install and Enable ",(0,i.jsx)(n.a,{href:"https://www.drupal.org/project/restui",children:"REST UI module"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Once installed, go to /admin/config/services/rest and enable your REST Resource."}),"\n",(0,i.jsx)(n.li,{children:"Select your desired settings. Normally this is GET, JSON, and cookie for simple read only endpoints."}),"\n",(0,i.jsx)(n.li,{children:"Go to permissions and enable anonymous and authenticated users to access your new endpoint."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adjust-cors",children:"Adjust CORS"}),"\n",(0,i.jsx)(n.p,{children:"If this endpoint is to be accessed via JS, and you haven't already, you may need to adjust CORS parameters in your settings.yml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",children:"    cors.config:\n    enabled: true\n    allowedHeaders: ['x-csrf-token','authorization','content-type','accept','origin','x-requested-with']\n    allowedMethods: ['*']\n    allowedOrigins: ['*']\n    exposedHeaders: true\n    maxAge: 1000\n    supportsCredentials: false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"caching-notes",children:"Caching Notes"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes, we may need to specifically turn off the cache, or set a context for something like the URL or parameters. At its simplest, it can look like this example."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get() {\n  $build = [\n    '#cache' => [\n      'max-age' => 0,\n    ],\n  ];\n  // $filters defined here\n  $response['data'] = MyGeneralService::getStuffWithArgs($filters, NULL);\n  return (new ResourceResponse($response))->addCacheableDependency($build);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"wysiwyg-notes",children:"WYSIWYG Notes"}),"\n",(0,i.jsx)(n.p,{children:'If using entity embeds/etc within WYSIWYG\'s, additional processing may be required. Below, we have made a WYSIWYG text format just for the REST view, and enabled things like "Display embedded entities". We then call it by machine name below.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$description = $result->body->value;\n$program['body'] = check_markup($description, \"MY_CUSTOM_TEXT_FORMAT\");\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After that, you are probably going to need to convert Relative to Absolute Image URL's. An easy option, is to use the ",(0,i.jsx)(n.a,{href:"https://www.drupal.org/project/rel_to_abs",children:"Relative Path to Absolute URLs"}),' module. Enable, then be sure it is both added to the REST text format above, with that filter running AFTER "Display embedded entities".']})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
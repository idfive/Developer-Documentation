"use strict";(self.webpackChunkidfive_docs=self.webpackChunkidfive_docs||[]).push([[3726],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(t),g=r,c=u["".concat(d,".").concat(g)]||u[g]||m[g]||i;return t?a.createElement(c,l(l({ref:n},p),{},{components:t})):a.createElement(c,l({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3419:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={},l="Entities",o={unversionedId:"back-end/drupal/drupal-entities",id:"back-end/drupal/drupal-entities",title:"Entities",description:"Nodes",source:"@site/docs/back-end/drupal/drupal-entities.md",sourceDirName:"back-end/drupal",slug:"/back-end/drupal/drupal-entities",permalink:"/docs/back-end/drupal/drupal-entities",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/back-end/drupal/drupal-entities.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration Management",permalink:"/docs/back-end/drupal/drupal-config-management"},next:{title:"Entity queries in drupal",permalink:"/docs/back-end/drupal/drupal-entity-queries"}},d={},s=[{value:"Nodes",id:"nodes",level:2},{value:"Preprocessing Nodes",id:"preprocessing-nodes",level:3},{value:"Baseline",id:"baseline",level:4},{value:"View Modes",id:"view-modes",level:4},{value:"Bundles",id:"bundles",level:4},{value:"Putting it all together",id:"putting-it-all-together",level:4},{value:"Working with Nodes",id:"working-with-nodes",level:3},{value:"Load node by NID",id:"load-node-by-nid",level:4},{value:"Get NID from loaded $node",id:"get-nid-from-loaded-node",level:4},{value:"Get Bundle from loaded $node",id:"get-bundle-from-loaded-node",level:4},{value:"Get field values from loaded $node",id:"get-field-values-from-loaded-node",level:4},{value:"Get media image URL from media reference field",id:"get-media-image-url-from-media-reference-field",level:4},{value:"Set field values from a loaded $node",id:"set-field-values-from-a-loaded-node",level:4},{value:"Delete Nodes",id:"delete-nodes",level:4},{value:"Paragraphs",id:"paragraphs",level:2},{value:"Programmatically create a paragraph",id:"programmatically-create-a-paragraph",level:3}],p={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"entities"},"Entities"),(0,r.kt)("h2",{id:"nodes"},"Nodes"),(0,r.kt)("h3",{id:"preprocessing-nodes"},"Preprocessing Nodes"),(0,r.kt)("h4",{id:"baseline"},"Baseline"),(0,r.kt)("p",null,"We find it helpful to set up the following as a baseline on most projects:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"View mode: Full, teaser, etc. Lets us target Full views only, for some more complex processing, thus stopping it from running for teasers/etc."),(0,r.kt)("li",{parentName:"ul"},"Bundle: We can then target nodes of particular bundles."),(0,r.kt)("li",{parentName:"ul"},"NID: We use it quite a lot to pass parameters to views/etc, so simply handy to have.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"}," /**\n   * Implements hook_preprocess_HOOK() for page templates.\n   *\n   * @param $variables\n   */\nfunction MY_THEME_preprocess_node(&$variables) {\n  $node = $variables['elements']['#node'];\n  $view_mode = $variables['view_mode'];\n  $bundle = $node->bundle();\n  $nid = $node->id();\n}\n")),(0,r.kt)("h4",{id:"view-modes"},"View Modes"),(0,r.kt)("p",null,'View modes are handy, because we often do not want to run certain functions "every time a node is loaded", rather, "every time a node is loaded for a particular view mode". For instance, in the below code, we will load:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A variable ",(0,r.kt)("inlineCode",{parentName:"li"},"{{ link }}")," for teasers, which is the path to the full view of the content."),(0,r.kt)("li",{parentName:"ul"},"A hero image URL, variable ",(0,r.kt)("inlineCode",{parentName:"li"},"{{ hero_image_url }}")," for the full view of the content.")),(0,r.kt)("p",null,"You don't need ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ link }}")," in the full view of the content, as you are already on the page. Conversely, no point loading the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ hero_image_url }}")," in a teaser, so lets save that processing power for other things."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Drupal\\media\\Entity\\Media;\nuse Drupal\\image\\Entity\\ImageStyle;\n\nif ($view_mode !== 'full') {\n  $variables['link'] = \\Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $nid);\n} else {\n  $variables['hero_image_url'] = '/path/to/sitewide/default/hero/image/here.png';\n  if ($node->hasField('MY_HERO_IMAGE_MEDIA_FIELD')) {\n    $image = $node->get('MY_HERO_IMAGE_MEDIA_FIELD')->getValue();\n    if ($image && !empty($image)) {\n      $entity = Media::load($image[0]['target_id']);\n      if (isset($entity) && $entity->field_media_image->entity !== NULL && $entity->field_media_image->entity->getFileUri() !== NULL) {\n        $variables['hero_image_url'] = ImageStyle::load('MY_HERO_IMAGE_STYLE')->buildUrl($entity->field_media_image->entity->getFileUri());\n      }\n    }\n  }\n}\n")),(0,r.kt)("h4",{id:"bundles"},"Bundles"),(0,r.kt)("p",null,"Bundles let us target nodes by type. This allows us to do some things for NODE_TYPE_ONE, and other things for NODE_TYPE_TWO."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"if ($bundle == 'NODE_TYPE_ONE') {\n  // Do something for NODE_TYPE_ONE.\n} elseif ($bundle == 'NODE_TYPE_TWO') {\n  // Do something for NODE_TYPE_TWO.\n}\n")),(0,r.kt)("p",null,"You could also use ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," if you prefer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"switch ($bundle) {\n  case 'NODE_TYPE_ONE':\n    // Do something for NODE_TYPE_ONE.\n  break;\n  case 'NODE_TYPE_TWO':\n    // Do something for NODE_TYPE_TWO.\n  break;\n}\n")),(0,r.kt)("h4",{id:"putting-it-all-together"},"Putting it all together"),(0,r.kt)("p",null,"Combine Bundle and View Mode to fine tune any content you need to alter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"if ($bundle == 'NODE_TYPE_ONE') {\n  if ($view_mode !== 'full') {\n    // Do something for NODE_TYPE_ONE teaser.\n  } else {\n    // Do something for NODE_TYPE_ONE full view.\n  }\n} elseif ($bundle == 'NODE_TYPE_TWO') {\n  if ($view_mode !== 'full') {\n    // Do something for NODE_TYPE_TWO teaser.\n  } else {\n    // Do something for NODE_TYPE_TWO full view.\n  }\n}\n")),(0,r.kt)("h3",{id:"working-with-nodes"},"Working with Nodes"),(0,r.kt)("h4",{id:"load-node-by-nid"},"Load node by NID"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$nid = 123;\n$node_storage = \\Drupal::entityTypeManager()->getStorage('node');\n$node = $node_storage->load($nid);\n")),(0,r.kt)("h4",{id:"get-nid-from-loaded-node"},"Get NID from loaded $node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$node->id();\n")),(0,r.kt)("h4",{id:"get-bundle-from-loaded-node"},"Get Bundle from loaded $node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$node->bundle();\n")),(0,r.kt)("h4",{id:"get-field-values-from-loaded-node"},"Get field values from loaded $node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$node->title->value;\n$node->created->value;\n$node->body->value;\n$node->body->summary;\n$node->MY_TEXT_FIELD->value;\n$node->MY_IMAGE_FIELD->target_id;\n")),(0,r.kt)("h4",{id:"get-media-image-url-from-media-reference-field"},"Get media image URL from media reference field"),(0,r.kt)("p",null,"Always load image/media URLS as an appropriate image style."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Drupal\\media\\Entity\\Media;\nuse Drupal\\image\\Entity\\ImageStyle;\n\nif ($node->hasField('MY_HERO_IMAGE_MEDIA_FIELD')) {\n  $image = $node->get('MY_HERO_IMAGE_MEDIA_FIELD')->getValue();\n  if ($image && !empty($image)) {\n    $entity = Media::load($image[0]['target_id']);\n    if (isset($entity) && $entity->field_media_image->entity !== NULL && $entity->field_media_image->entity->getFileUri() !== NULL) {\n      $variables['hero_image_url'] = ImageStyle::load('MY_HERO_IMAGE_STYLE')->buildUrl($entity->field_media_image->entity->getFileUri());\n    }\n  }\n}\n")),(0,r.kt)("h4",{id:"set-field-values-from-a-loaded-node"},"Set field values from a loaded $node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$node->set('title', \"MY NEW TITLE\");\n$node->set('body', array(\n'summary' => \"MY NEW SUMMARY\",\n'value' => \"MY NEW FULL BODY\",\n'format' => 'basic_html',\n));\n$node->save();\n")),(0,r.kt)("h4",{id:"delete-nodes"},"Delete Nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// Single node by NID.\n$nid = 42;\n$node = $node_storage->load($nid);\n$node->delete();\n// Multiple nodes by NID.\n$nids = [21,12,45,67];\n$nodes = $node_storage->loadMultiple($nids);\n$node_storage->delete($nodes);\n// Multiple nodes by NID, loading one at a time to perform other functions.\n$nids = [21,12,45,67];\nforeach($nids as $nid)\n{\n  $node = $node_storage->load($nid);\n  // Do something else here if needed.\n  $node->delete();\n}\n")),(0,r.kt)("h2",{id:"paragraphs"},"Paragraphs"),(0,r.kt)("h3",{id:"programmatically-create-a-paragraph"},"Programmatically create a paragraph"),(0,r.kt)("p",null,"We sometimes find ourselves in the situation of needing to create referenced entities (usually paragraphs) based on if a field on a node/etc is filled out. Here is a basic example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Drupal\\paragraphs\\Entity\\Paragraph;\nuse Drupal\\Core\\Entity\\EntityInterface;\n\n/**\n * Implements hook_entity_presave().\n */\nfunction MY_MODULE_entity_presave(EntityInterface $entity) {\n  switch ($entity->bundle()) {\n    case 'MY_NODE_BUNDLE':\n      if ($entity->field_artist_iaa_recipient->getValue()) {\n        $entity = _my_module_create_paragraph($entity);\n      }\n      break;\n  }\n}\n")),(0,r.kt)("p",null,"Then create the paragraph and attach to the entity, and deliver entity back to the update/similar hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function _MY_MODULE_create_awards_paragraph($entity) {\n  // Process the $entity for any needed values/logic/etc, from a trigger field on the entity/node.\n  $trigger = $entity->FIELD_MY_TRIGGER_FIELD->value;\n\n  // Create paragraph\n  $paragraph = Paragraph::create(['type' => 'MY_PARAGRAPH_BUNDLE']);\n  $paragraph->set('FIELD_MY_FIELD', $trigger);\n  $paragraph->isNew();\n  $paragraph->save();\n  // Grab any existing paragraphs from the node, and add this one\n  $current = $entity->get('FIELD_REFERENCE_FIELD_ON_NODE')->getValue();\n  $current[] = array(\n      'target_id' => $paragraph->id(),\n      'target_revision_id' => $paragraph->getRevisionId(),\n    );\n  $entity->set('FIELD_REFERENCE_FIELD_ON_NODE', $current);\n  // If needed, Unset trigger field so does not run again.\n  $entity->set('FIELD_MY_TRIGGER_FIELD', []);\n  return $entity;\n}\n")))}m.isMDXComponent=!0}}]);